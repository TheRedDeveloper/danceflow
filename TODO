✔ Fork the newest version of Danceflow @done(25-04-03 16:03)
✔ Change Readme, Extension Info @done(25-04-03 22:33)
✔ rename @done(25-04-05 15:44)
  ✔ "normal" → "move" @done(25-04-05 13:56)
  ✔ "insert" → "modify" @done(25-04-05 15:40)
✔ Select mode with underline cursor @done(25-04-05 15:50)
☐ Handle keybindings properly
  ✔ Find out how keybindings are currently handled and made @done(25-04-05 18:21)
    parseAdditional in meta.ts parses the markdown contained in the comments of files in src/commands/
    parseKeys parses these and the @keys property in the JSDoc of files in src/commands/
    getKeybindings uses this info to create the keybindings
    from which pkg in package.build.json then chooses the correct keybindings
    src/api/keys.ts only contains "TODO" and was left like this 3 years ago
    src/api/commands/keybindings.ts is also left todo for 4 years
    This is crazy! This should be refactored immediately!
    
  ✔ Remove src/api/keys.ts and src/api/commands/keybindings.ts @done(25-04-05 22:08)
  
  All of this needs to be done at build time! NOT RUNTIME!

  Key handlers will be grouped as
    Editor:
      Global: `esc` `⎈p` `⎈o` `⎈r` ...
      Inspect → Inspect Mode: `f` `t` `z` `g` ...
      Interact: `y`/`⎈c` `[0-9]` ...
      Change → Move Mode: `d`/`⎈x` `⇧d` `⎇d` ...
      SelectedMove → Select Mode: `h` `j` `k` `l` `w` ...
      Move → Move Mode: `h` `j` `k` `l` `w` ...
    
    Menu: `h` `j` `k` `l` ...

  Let's just focus on the editor keybindings for now.

  All editor keybinds are prioritized as such
    1. Global
    2. Inspect
    3. Interact
    4. Change
    5. SelectedMove
    6. Move
  
  ✔ Default keybindings should be set on the ordered groups in src/keybinds/default.ts @done(25-04-06 15:11)
    The object I configure should be like this
    {
      global: {
        "danceflow.exit": [`esc`],
        "danceflow.togglePanel.git": [`⇧1`, `⎈⇧g`],
        "danceflow.togglePanel.explorer": [`⇧2`, `⎈⇧e`],
        "danceflow.togglePanel.testing": [`⇧3`, `⎈⇧t`],
        ...
      },
      inspect: {
        ...
      },
      selectedMove: {
        "danceflow.selectedMove.left": [`h`],
        ...
        "danceflow.move.lineDown": [`x`],
        ...
      },
      move: {
        "danceflow.move.left": [`h`],
        ...
        "danceflow.move.lineDown": [`x`],
        ...
        'danceflow.openMenu{"menu": "match"}': [`m`],
        ...
      }
    }
      
  ✔ At build time in src/api/keybinds/resolve.ts we should find out a key bind's condition, having it deactivate when overwritten @done(25-04-06 16:51)
    Example:
    The move.left command on `h` should be inactive when selectedMove is active,
    because selectedMove contains the same keybind and is higher priority (above in the list).

    Note that a condition is not added if a key is multi-assigned in the same group
    only when another group has the same keybind.

    First we should separate out all the multi-assigned keybinds
    Then we should separate out the args if any and parse them
    Then we should find the condition of each keybind, by what others should be overwriting it
    This results in an object like this
    {
      global: [
        {key: `esc`, command: "danceflow.exit"},
        {key: `⇧1`, command: "danceflow.togglePanel.git"},
        {key: `⎈⇧g`, command: "danceflow.togglePanel.git"},
        {key: `⇧2`, command: "danceflow.togglePanel.explorer"},
        {key: `⎈⇧e`, command: "danceflow.togglePanel.explorer"},
        {key: `⇧3`, command: "danceflow.togglePanel.testing"},
        {key: `⎈⇧t`, command: "danceflow.togglePanel.testing"},
        ...
      ],
      inspect: [
        ...
      ],
      ...
      selectedMove: [
        {key: `h`, command: "danceflow.selectedMove.left"},
        ...
      ],
      move: [
        {key: `h`, command: "danceflow.move.left", condition: "!danceflow.selectedMove.active"},
        ...
        {key: `m`, command: "danceflow.openMenu", args: {"menu": "match"}},
        ...
      ]
    }
  
  ✔ Every keybind should only be active when its corresponding group is active unless its global @done(25-04-06 16:51)
    This results in a final object like this
    {
      {key: `esc`, command: "danceflow.exit"},
      {key: `⇧1`, command: "danceflow.togglePanel.git"},
      {key: `⎈⇧g`, command: "danceflow.togglePanel.git"},
      {key: `⇧2`, command: "danceflow.togglePanel.explorer"},
      {key: `⎈⇧e`, command: "danceflow.togglePanel.explorer"},
      {key: `⇧3`, command: "danceflow.togglePanel.testing"},
      {key: `⎈⇧t`, command: "danceflow.togglePanel.testing"},
      ...
      {key: `h`, command: "danceflow.selectedMove.left", condition: "danceflow.selectedMove.active"},
      ...
      {key: `h`, command: "danceflow.move.left", condition: "danceflow.move.active && !danceflow.selectedMove.active"},
      ...
      {key: `m`, command: "danceflow.openMenu", args: {"menu": "match"}, condition: "danceflow.move.active"},
      ...
    }
  
  This system will greatly reduce the amount of pain needed to add a new mode.

  ✔ Ensure that this works with inline tests unsing the ### Example syntax described in test/README.md @done(25-04-06 18:59)
    
  ✔ Every mode needs to have a configurable list of active groups @done(25-04-06 20:44)
    These will have to be made configurable inside package.build.ts inside "danceflow.modes"
    Modify Mode:
    - Global
    Move Mode:
    - Global
    - Interact
    - Change
    - Move
    Select Mode:
    - Global
    - Interact
    - SelectedMove
    - Change → Move Mode
    Inspect Mode:
    - Global
    - Inspect
    - Interact
    - Change → Move Mode
    - Move → Move Mode
    
  ✔ The context needs to be provided to vscode whether the group is active or not. @done(25-04-06 20:44)
    ✔ Fix tests failing probably because changing mode now takes longer @done(25-04-07 00:22)
  
  ✔ The keybindings need to be built inside package.build.ts and put in insetad of the current ones @done(25-04-07 01:33)
    By using processKeybindings from src/api/keybinds/resolve.ts on the default export of src/keybinds/default.ts
    ✔ Bring back the ignore keys @done(25-04-07 23:07)
    ✔ Fix that escape is not working for some reason @done(25-04-07 18:17)
    ✔ Fix that tab is autocomplete and indent @done(25-04-07 21:30)
      Indent needs a key that is not used and has an available shift and is memorable
      Autocomplete needs to be a key that is not used and is not a typable key
        Tab is the only non-toggle typable key
      After careful evaluation I decided to use ⇧space for autocomplete instead of tab
      and add ⎈space to the keybinds to toggle intelisense
      ✔ Add ⇧space for autocomplete @done(25-04-07 21:30)
        We need to add these:
        {
            "key": "ctrl+space",
            "command": "editor.action.inlineSuggest.commit",
            "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
        },
        {
            "key": "ctrl+space",
            "command": "editor.action.inlineSuggest.jump",
            "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
        }
        This requires complex when clauses,
        ✔ Support command[whenclause] @done(25-04-07 19:04)
      ✔ Remove tab for autocomplete using - @done(25-04-07 20:44)
      ✔ Add ⎈space for intellisense toggle @done(25-04-07 20:47)
      ✔ `⎈⇧space` Inline Chat @done(25-04-07 20:54)
    ✔ Fix that editor keys are ignored everywhere: introducing editor key group @done(25-04-07 18:18)
    ✔ Fix that some vscode keys need to be removed for toggleing panels: @done(25-04-07 20:44)
      {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
      },
      {
          "key": "ctrl+2",
          "command": "-workbench.action.focusSecondEditorGroup"
      },
      {
          "key": "ctrl+3",
          "command": "-workbench.action.focusThirdEditorGroup"
      },
      {
          "key": "ctrl+4",
          "command": "-workbench.action.focusFourthEditorGroup"
      },
      {
          "key": "ctrl+5",
          "command": "-workbench.action.focusFifthEditorGroup"
      },
      {
          "key": "ctrl+6",
          "command": "-workbench.action.focusSixthEditorGroup"
      },
      {
          "key": "ctrl+7",
          "command": "-workbench.action.focusSeventhEditorGroup"
      },
      {
          "key": "ctrl+8",
          "command": "-workbench.action.focusEighthEditorGroup"
      },
      {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
      },
    ✔ Fix that menu keys are missing @done(25-04-07 21:25)
    ✔ Fix that I can't type the n key in modify mode @done(25-04-08 01:21)
    
  ☐ Some commands ensure being in a specific mode before executing.
    ☐ Error if they can not switch into it.

☐ The last cursor should always be the primary cursor
☐ Remove multiple registers and buffers
  ✔ Learn how paste works @done(25-04-06 14:21)
    Overwritten register. Total chaos!
☐ Simplify macros
  ☐ Add toggle functionality
    ☐ Remove that there can be multiple recordings at the same time
  ☐ Add recording save/load functionality
☐ There should be a simpler editor window
  ✔ Remove the weird orange bar @done(25-04-05 23:42)
  ✔ Remove that the current line is bright in move mode @done(25-04-06 01:14)
  ☐ Fix that there is a 2 wide highlight at the cursor
  ☐ We completely disallow splitting it's distracting and ugly and just open another window with `⎈p`
  ☐ Hide tabs
  ☐ Hide the menu bar
  ☐ Hide the activity bar
  ☐ You should be able to move in the explorer with move keys
    ☐ `a` is new file, `⇧a` is new folder
    ☐ `r`/`F2` is rename
  ☐ Remove state sidepanel
  ☐ You should be able to move in Code Lens and Code Actions with them too
☐ splitlines exclude Eol true
☐ Add to jump history, when changing more than one line
  ☐ `'` Create jumppoint
  ☐ `[` To previous jump location
  ☐ `]` To next jump location
☐ Update object select `m￼`
  ☐ Arround is the default, inside needs another keypress
  ☐ Add treesitter support out of the box
☐ Add enclose `'￼` functionality
☐ Make select mode work with VSCode find
☐ Add Inspect mode:
  ☐ `space` enter inspect mode or if a url/file is under the main cursor then follow it
  ☐ it should select the hovered symbols and hide the cursors
  ☐ multiple cursors → main cursor inspector is shown, rename on all heads
  ☐ `f` Go to definition
  ☐ `t` Go to type definition
  ☐ `z` Go to implementations
  ☐ `g` Go to references
  ☐ `r` Rename
  ☐ `⇧r` Rename to clipboard
  ☐ `y`/`⎈c` Copy the symbol
  ☐ `⇧y`/`⎈⇧c` Copy the symbol info
  ☐ `space` Quick Fix if available
  ☐ `esc` back to move mode
  ☐ Any move or change key should exit inspect mode and run
☐ Scripting with live preview
  ☐ `/` to pipe each selection through a JavaScript Expression
  ☐ `⇧/` to evaluate all selections in a JavaScript Expression, showing result below in the prompt
  ☐ `⎈/` to create a JavaScript file with a run function somewhere which selections are piped through until the file is closed
  ☐ `⇧⎈/` create a javascript file with the selections as a constant *sels*
☐ When over a new line character the cursor should extend infinitely to the right.
☐ There should be a tutorial