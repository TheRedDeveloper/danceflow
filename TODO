✔ Fork the newest version of Danceflow @done(25-04-03 16:03)
✔ Change Readme, Extension Info @done(25-04-03 22:33)
✔ rename @done(25-04-05 15:44)
  ✔ "normal" → "move" @done(25-04-05 13:56)
  ✔ "insert" → "modify" @done(25-04-05 15:40)
✔ Select mode with underline cursor @done(25-04-05 15:50)
☐ Handle keybindings properly
  ✔ Find out how keybindings are currently handled and made @done(25-04-05 18:21)
    parseAdditional in meta.ts parses the markdown contained in the comments of files in src/commands/
    parseKeys parses these and the @keys property in the JSDoc of files in src/commands/
    getKeybindings uses this info to create the keybindings
    from which pkg in package.build.json then chooses the correct keybindings
    This is crazy! This should be refactored immediately!
  
  ☐ Key handlers will be grouped as
    Editor:
      Global: `esc` `⎈p` `⎈o` `⎈r` ...
      Inspect → Inspect Mode: `f` `t` `z` `g` ...
      Interact: `y`/`⎈c` `[0-9]` ...
      Change → Move Mode: `d`/`⎈x` `⇧d` `⎇d` ...
      SelectedMove → Select Mode: `h` `j` `k` `l` `w` ...
      Move → Move Mode: `h` `j` `k` `l` `w` ...
    
    Menu: `h` `j` `k` `l` ...

  ☐ Some handlers ensure being in a specific mode before executing.
    ☐ They error if they can not switch into it.
  
  ☐ All handlers are prioritized as such
    1. Global
    2. Inspect
    3. Interact
    4. Change
    5. Move
    6. SelectedMove
    7. Select
  
  ☐ Every mode needs to have a configurable list of active handler groups
    Modify Mode:
    - Global
    Move Mode:
    - Global
    - Interact
    - Change
    - Move
    Select Mode:
    - Global
    - Interact
    - SelectedMove
    - Change → Move Mode
    Inspect Mode:
    - Global
    - Inspect
    - Interact
    - Change → Move Mode
    - Move → Move Mode

  ☐ At compile time we should find out which handler is active when, having it deactivate when overwritten
    ☐ The move.left handler on `h` should be inactive when the higher priority selectedMove is active because it has selectedMove.left on `h`

☐ The last cursor should always be the primary cursor
☐ There should be a simpler editor window
  ☐ Remove the weird orange bar
  ☐ We completely disallow splitting it's distracting and ugly and just open another window with `⎈p`
  ☐ Hide tabs
  ☐ Hide the menu bar
  ☐ Hide the activity bar
  ☐ You should be able to move in the explorer with move keys
      ☐ `a` is new file, `⇧a` is new folder
      ☐ `r`/`F2` is rename
  ☐ You should be able to move in Code Lens and Code Actions with them too
☐ splitlines exclude Eol true
☐ Add to jump history, when changing more than one line
  ☐ `'` Create jumppoint
  ☐ `[` To previous jump location
  ☐ `]` To next jump location
☐ Update object select `m￼`
☐ Make select mode work with VSCode find
☐ Add Inspect mode:
  ☐ `space` enter inspect mode or if a url/file is under the main cursor then follow it
  ☐ it should select the hovered symbols and hide the cursors
  ☐ multiple cursors → main cursor inspector is shown, rename on all heads
  ☐ `f` Go to definition
  ☐ `t` Go to type definition
  ☐ `z` Go to implementations
  ☐ `g` Go to references
  ☐ `r` Rename
  ☐ `⇧r` Rename to clipboard
  ☐ `y`/`⎈c` Copy the symbol
  ☐ `⇧y`/`⎈⇧c` Copy the symbol info
  ☐ `space` Quick Fix if available
  ☐ `esc` back to move mode
  ☐ Any move or change key should exit inspect mode and run
☐ Scripting with live preview
  ☐ `/` to pipe each selection through a JavaScript Expression
  ☐ `⇧/` to evaluate all selections in a JavaScript Expression, showing result below in the prompt
  ☐ `⎈/` to create a JavaScript file with a run function somewhere which selections are piped through until the file is closed
  ☐ `⇧⎈/` create a javascript file with the selections as a constant *sels*
☐ When over a new line character the cursor should extend infinitely to the right.
☐ There should be a tutorial