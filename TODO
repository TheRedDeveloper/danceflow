✔ Fork the newest version of Danceflow @done(25-04-03 16:03)
✔ Change Readme, Extension Info @done(25-04-03 22:33)
✔ rename @done(25-04-05 15:44)
  ✔ "normal" → "move" @done(25-04-05 13:56)
  ✔ "insert" → "modify" @done(25-04-05 15:40)
✔ Select mode with underline cursor @done(25-04-05 15:50)
✔ Handle keybindings properly @done(25-04-10 18:54)
  ✔ Find out how keybindings are currently handled and made @done(25-04-05 18:21)
    parseAdditional in meta.ts parses the markdown contained in the comments of files in src/commands/
    parseKeys parses these and the @keys property in the JSDoc of files in src/commands/
    getKeybindings uses this info to create the keybindings
    from which pkg in package.build.json then chooses the correct keybindings
    src/api/keys.ts only contains "TODO" and was left like this 3 years ago
    src/api/commands/keybindings.ts is also left todo for 4 years
    This is crazy! This should be refactored immediately!
    
  ✔ Remove src/api/keys.ts and src/api/commands/keybindings.ts @done(25-04-05 22:08)
  
  All of this needs to be done at build time! NOT RUNTIME!

  Key handlers will be grouped as
    Editor:
      Global: `esc` `⎈p` `⎈o` `⎈r` ...
      Inspect → Inspect Mode: `f` `t` `z` `g` ...
      Interact: `y`/`⎈c` `[0-9]` ...
      Change → Move Mode: `d`/`⎈x` `⇧d` `⎇d` ...
      SelectedMove → Select Mode: `h` `j` `k` `l` `w` ...
      Move → Move Mode: `h` `j` `k` `l` `w` ...
    
    Menu: `h` `j` `k` `l` ...

  Let's just focus on the editor keybindings for now.

  All editor keybinds are prioritized as such
    1. Global
    2. Inspect
    3. Interact
    4. Change
    5. SelectedMove
    6. Move
  
  ✔ Default keybindings should be set on the ordered groups in src/keybinds/default.ts @done(25-04-06 15:11)
    The object I configure should be like this
    {
      global: {
        "danceflow.exit": [`esc`],
        "danceflow.togglePanel.git": [`⇧1`, `⎈⇧g`],
        "danceflow.togglePanel.explorer": [`⇧2`, `⎈⇧e`],
        "danceflow.togglePanel.testing": [`⇧3`, `⎈⇧t`],
        ...
      },
      inspect: {
        ...
      },
      selectedMove: {
        "danceflow.selectedMove.left": [`h`],
        ...
        "danceflow.move.lineDown": [`x`],
        ...
      },
      move: {
        "danceflow.move.left": [`h`],
        ...
        "danceflow.move.lineDown": [`x`],
        ...
        'danceflow.openMenu{"menu": "match"}': [`m`],
        ...
      }
    }
      
  ✔ At build time in src/api/keybinds/resolve.ts we should find out a key bind's condition, having it deactivate when overwritten @done(25-04-06 16:51)
    Example:
    The move.left command on `h` should be inactive when selectedMove is active,
    because selectedMove contains the same keybind and is higher priority (above in the list).

    Note that a condition is not added if a key is multi-assigned in the same group
    only when another group has the same keybind.

    First we should separate out all the multi-assigned keybinds
    Then we should separate out the args if any and parse them
    Then we should find the condition of each keybind, by what others should be overwriting it
    This results in an object like this
    {
      global: [
        {key: `esc`, command: "danceflow.exit"},
        {key: `⇧1`, command: "danceflow.togglePanel.git"},
        {key: `⎈⇧g`, command: "danceflow.togglePanel.git"},
        {key: `⇧2`, command: "danceflow.togglePanel.explorer"},
        {key: `⎈⇧e`, command: "danceflow.togglePanel.explorer"},
        {key: `⇧3`, command: "danceflow.togglePanel.testing"},
        {key: `⎈⇧t`, command: "danceflow.togglePanel.testing"},
        ...
      ],
      inspect: [
        ...
      ],
      ...
      selectedMove: [
        {key: `h`, command: "danceflow.selectedMove.left"},
        ...
      ],
      move: [
        {key: `h`, command: "danceflow.move.left", condition: "!danceflow.selectedMove.active"},
        ...
        {key: `m`, command: "danceflow.openMenu", args: {"menu": "match"}},
        ...
      ]
    }
  
  ✔ Every keybind should only be active when its corresponding group is active unless its global @done(25-04-06 16:51)
    This results in a final object like this
    {
      {key: `esc`, command: "danceflow.exit"},
      {key: `⇧1`, command: "danceflow.togglePanel.git"},
      {key: `⎈⇧g`, command: "danceflow.togglePanel.git"},
      {key: `⇧2`, command: "danceflow.togglePanel.explorer"},
      {key: `⎈⇧e`, command: "danceflow.togglePanel.explorer"},
      {key: `⇧3`, command: "danceflow.togglePanel.testing"},
      {key: `⎈⇧t`, command: "danceflow.togglePanel.testing"},
      ...
      {key: `h`, command: "danceflow.selectedMove.left", condition: "danceflow.selectedMove.active"},
      ...
      {key: `h`, command: "danceflow.move.left", condition: "danceflow.move.active && !danceflow.selectedMove.active"},
      ...
      {key: `m`, command: "danceflow.openMenu", args: {"menu": "match"}, condition: "danceflow.move.active"},
      ...
    }
  
  This system will greatly reduce the amount of pain needed to add a new mode.

  ✔ Ensure that this works with inline tests unsing the ### Example syntax described in test/README.md @done(25-04-06 18:59)
    
  ✔ Every mode needs to have a configurable list of active groups @done(25-04-06 20:44)
    These will have to be made configurable inside package.build.ts inside "danceflow.modes"
    Modify Mode:
    - Global
    Move Mode:
    - Global
    - Interact
    - Change
    - Move
    Select Mode:
    - Global
    - Interact
    - SelectedMove
    - Change → Move Mode
    Inspect Mode:
    - Global
    - Inspect
    - Interact
    - Change → Move Mode
    - Move → Move Mode
    
  ✔ The context needs to be provided to vscode whether the group is active or not. @done(25-04-06 20:44)
    ✔ Fix tests failing probably because changing mode now takes longer @done(25-04-07 00:22)
  
  ✔ The keybindings need to be built inside package.build.ts and put in insetad of the current ones @done(25-04-07 01:33)
    By using processKeybindings from src/api/keybinds/resolve.ts on the default export of src/keybinds/default.ts
    ✔ Bring back the ignore keys @done(25-04-07 23:07)
    ✔ Fix that escape is not working for some reason @done(25-04-07 18:17)
    ✔ Fix that tab is autocomplete and indent @done(25-04-07 21:30)
      Indent needs a key that is not used and has an available shift and is memorable
      Autocomplete needs to be a key that is not used and is not a typable key
        Tab is the only non-toggle typable key
      After careful evaluation I decided to use ⇧space for autocomplete instead of tab
      and add ⎈space to the keybinds to toggle intelisense
      ✔ Add ⇧space for autocomplete @done(25-04-07 21:30)
        We need to add these:
        {
            "key": "ctrl+space",
            "command": "editor.action.inlineSuggest.commit",
            "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
        },
        {
            "key": "ctrl+space",
            "command": "editor.action.inlineSuggest.jump",
            "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
        }
        This requires complex when clauses,
        ✔ Support command[whenclause] @done(25-04-07 19:04)
      ✔ Remove tab for autocomplete using - @done(25-04-07 20:44)
      ✔ Add ⎈space for intellisense toggle @done(25-04-07 20:47)
      ✔ `⎈⇧space` Inline Chat @done(25-04-07 20:54)
    ✔ Fix that editor keys are ignored everywhere: introducing editor key group @done(25-04-07 18:18)
    ✔ Fix that some vscode keys need to be removed for toggleing panels: @done(25-04-07 20:44)
      {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
      },
      {
          "key": "ctrl+2",
          "command": "-workbench.action.focusSecondEditorGroup"
      },
      {
          "key": "ctrl+3",
          "command": "-workbench.action.focusThirdEditorGroup"
      },
      {
          "key": "ctrl+4",
          "command": "-workbench.action.focusFourthEditorGroup"
      },
      {
          "key": "ctrl+5",
          "command": "-workbench.action.focusFifthEditorGroup"
      },
      {
          "key": "ctrl+6",
          "command": "-workbench.action.focusSixthEditorGroup"
      },
      {
          "key": "ctrl+7",
          "command": "-workbench.action.focusSeventhEditorGroup"
      },
      {
          "key": "ctrl+8",
          "command": "-workbench.action.focusEighthEditorGroup"
      },
      {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
      },
    ✔ Fix that menu keys are missing @done(25-04-07 21:25)
    ✔ Fix that I can't type the n key in modify mode @done(25-04-08 01:21)
    
  ✔ Some commands ensure being in a specific mode before executing. @done(25-04-09 11:07)
  ✔ Number keys not in keybinds @done(25-04-09 11:22)

✔ The first cursor should always be the primary cursor @done(25-04-09 15:19)
☐ Remove multiple registers and buffers
  ✔ Learn how paste works @done(25-04-06 14:21)
    Overwritten register. Total chaos!
☐ Simplify macros
  ☐ Add toggle functionality
    ☐ Remove that there can be multiple recordings at the same time
  ☐ Add recording save/load functionality
✔ There should be a simpler editor window @done(25-04-10 18:54)
  ✔ Remove the weird orange bar @done(25-04-05 23:42)
  ✔ Remove that the current line is bright in move mode @done(25-04-06 01:14)
  ✔ Fix that there is a 2 wide highlight at the cursor @done(25-04-10 10:44)
  ✔ We completely disallow splitting it's distracting and ugly and just open another window with `⎈p` @done(25-04-10 18:38)
  ✔ Hide tabs @done(25-04-10 18:22)
  ✔ Hide the menu bar @done(25-04-10 18:22)
  ✔ Hide the activity bar @done(25-04-10 18:22)
  ✔ You should be able to move in the explorer with move keys @done(25-04-10 10:36)
    ✔ `a` is new file, `⇧a` is new folder @done(25-04-10 10:36)
    ✔ `r`/`F2` is rename @done(25-04-10 10:36)
  ✔ Remove state sidepanel @done(25-04-10 18:35)
  ✔ You should be able to move in Code Lens and Code Actions with them too @done(25-04-10 18:35)
✔ splitlines exclude Eol true @done(25-04-10 19:06)
☐ Add to jump history, when moving more than one line
  ✔ Use vscode jumplist for now @done(25-04-10 19:47)
  ☐ `'` Create jumppoint
  ☐ `[` To previous jump location
  ☐ `]` To next jump location
☐ Update object select `m￼`
  ✔ Arround is the default, inside needs another keypress @done(25-04-10 20:18)
  ☐ Add treesitter support out of the box
☐ Add enclose `'￼` functionality
✔ Add select until end of line (⎈l & ⎈h, beginning) @done(25-04-14 14:30)
✔ Update readme @done(25-04-14 14:30)
✔ Fix weird copying behavior (not copying character under cursor) @done(25-04-14 13:07)
✔ Fix weird change behavior (not going into change mode) @done(25-04-14 13:10)
☐ Fix VSCode not using character under cursor in forward selection
  This is a core problem with visual studio code selecting while the cursor is a block
  It uses normal carat selections but just shows a block, this means that the current
  thing the cursor is over isn't actually selected, making it not work with other parts
  of the editor like when I select something and press ⎈⇧f it doesn't use the thing my
  cursor is under because it's not actually selected, we just pretend it is.  
  Other extensions like Vim have a workaround of not actually using the block cursor,
  but just showing their own block cursor.
  We had the workaround of not using the VSCode features, but having our own.
  This has issues with everything vscode including the AI features.
  We could just leave this like this and not do the super complicated thing vim did
  and actually just select the correct thing before ⎈⇧f is activated by overwriting it.
  
  These are our options
    1. Refactor how selections are displayed and handled at their core
    2. Pretend this is not a problem and overwrite keybindings that rely on this
  
  Let's choose option 2, as I don't want to deal with option 1.
  If the "search in selection" or "add selection to chat" features which cannot be
  supported become significant we can choose to deal with option 1 in the future.
  
  So to implement 2 we would have to have a list for which commands should be overwritten
  such that the selection is adapted by reversing it, executing, and then reversing again.
  This only applies for forward facing selections. Okay so we need to surround a command
  with reverses only if the selection is forward. This means we need to split the keybinds in
  two, with one normal one active when not foreward (empty/back) and one surrounded active when
  it is foreward. This should be part of the when condition and needs to be implemented in
  resolve.ts with the list being part of default.ts

  Scratch that. There are only few commands requiring just to reverse the selection and
  unreverse it after. Some functionality like the `n` key require much
  deeper behavior. This behavior requires the implementation of a new danceflow command in order
  to wrap the vscode command. Another thing that is kinda annoying is how future instances
  are wrongly highlighted with forward selections due to our workaround.
  ☐ Implement new danceflow command to wrap find, quickSearch and showAllSymbol in misc.ts
  ☐ Implement complex command to customly wrap `n` and `⇧n` command in select mode

  We should find a way to handle this highlighting by ourselves in the future using
  custom decorations and deactivating the default highlighting.
  ☐ Custom decoration for occurrences highlighting
    ☐ Remove old occurrence highlighting

  We should fix the mouse overselecting when word selecting forward somehow.
  I'm not sure this is even possible with our workaround.
  Just checked. It's probably possible.
  ☐ Fix mouse overselecting when word selecting forward
  
✔ Make select mode work with VSCode find @done(25-04-10 20:04)
☐ Add Inspect mode:
  ✔ `space` enter inspect mode @done(25-04-10 21:27)
  ☐ if a url/file is under the main cursor then follow it (This is actually really hard)
  ✔ it should hover the selected symbol @done(25-04-10 21:37)
  ☐ multiple cursors → main cursor inspector is shown, rename on all heads
    ✔ Currently rename only on main cursor, would need  to work first @done(25-04-10 21:50)
  ✔ `f` Go to definition @done(25-04-10 21:25)
  ✔ `t` Go to type definition @done(25-04-10 21:25)
  ✔ `z` Go to implementations @done(25-04-10 21:25)
  ✔ `g` Go to references @done(25-04-10 21:25)
  ✔ `r` Rename @done(25-04-10 21:25)
    ✔ On main cursor @done(25-04-10 21:52)
    ☐ On all cursors
      ☐ Requires arbitrary renaming to work
  ☐ `⇧r` Rename to clipboard
    ☐ Requires arbitrary renaming to work
  ☐ `y`/`⎈c` Copy the symbol
  ☐ `⇧y`/`⎈⇧c` Copy the symbol info
  ✔ `space` Quick Fix if available @done(25-04-10 21:25)
  ✔ `esc` back to move mode @done(25-04-10 21:26)
  ✔ Any move or change key should exit inspect mode and run @done(25-04-10 21:26)
  ✔ Any mouse movement should exit inspect mode @done(25-04-10 21:26)
  ✔ All the inspect commands should exit inspect mode @done(25-04-10 21:26)
☐ Scripting with live preview
  ☐ `/` to pipe each selection through a JavaScript Expression
  ☐ `⇧/` to evaluate all selections in a JavaScript Expression, showing result below in the prompt
  ☐ `⎈/` to create a JavaScript file with a run function somewhere which selections are piped through until the file is closed
  ☐ `⇧⎈/` create a javascript file with the selections as a constant *sels*
☐ When over a new line character the cursor should extend infinitely to the right.
☐ There should be a tutorial