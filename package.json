{
  "name": "danceflow",
  "description": "The ultimate Neovim alternative for VSCode. Custom modes, key bindings, and a clean interface—forked from Danceflow, inspired by Helix.",
  "version": "0.5.15",
  "license": "ISC",
  "author": {
    "name": "RedDev"
  },
  "contributors": [
    {
      "name": "Grégoire Geis",
      "email": "opensource@gregoirege.is"
    },
    {
      "name": "Rémi Lavergne",
      "url": "https://github.com/Strackeror"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/71/danceflow.git"
  },
  "main": "./out/extension.js",
  "browser": "./out/web-extension.js",
  "engines": {
    "vscode": "^1.63.0"
  },
  "scripts": {
    "check": "tsc -p ./ && eslint . && depcruise -v .dependency-cruiser.js src",
    "format": "eslint . --fix",
    "generate": "ts-node ./meta.ts",
    "generate:watch": "ts-node ./meta.ts --watch",
    "compile-base": "esbuild src/extension.ts --bundle --external:vscode --external:child_process --target=es2021 --format=cjs --minify --keep-names",
    "compile": "yarn run compile-base --outfile=out/extension.js",
    "compile:watch": "yarn run compile --watch --sourcemap",
    "compile-web": "yarn run compile-base --outfile=out/web-extension.js --define:process.platform=\\\"web\\\" --define:process.env={}",
    "compile-web:watch": "yarn run compile-web --watch --sourcemap",
    "compile-tests": "globstar -- esbuild \"{src,test}/**/*.ts\" --target=es2021 --format=cjs --outdir=out --outbase=. --sourcemap",
    "compile-tests:watch": "yarn run compile-tests --watch",
    "test": "yarn run compile --sourcemap && yarn run compile-tests && node ./out/test/run.js",
    "vscode:prepublish": "yarn run generate && yarn run compile && yarn run compile-web",
    "package": "vsce package --allow-star-activation",
    "publish": "vsce publish --allow-star-activation",
    "package:pre": "vsce package --allow-star-activation --pre-release --no-git-tag-version --no-update-package-json 0.5.15001",
    "publish:pre": "vsce publish --allow-star-activation --pre-release --no-git-tag-version --no-update-package-json 0.5.15001"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "^17.0.33",
    "@types/vscode": "^1.63.0",
    "@typescript-eslint/eslint-plugin": "^5.23.0",
    "@typescript-eslint/parser": "^5.23.0",
    "@vscode/test-electron": "^2.1.3",
    "chokidar": "^3.5.3",
    "dependency-cruiser": "^11.7.0",
    "esbuild": "^0.18.4",
    "eslint": "^8.15.0",
    "glob": "^8.0.3",
    "globstar": "^1.0.0",
    "mocha": "^10.0.0",
    "source-map-support": "^0.5.21",
    "ts-loader": "^9.3.1",
    "ts-node": "^10.8.1",
    "typescript": "^4.8.4",
    "unexpected": "^13.0.0",
    "vsce": "^2.7.0",
    "web-tree-sitter": "^0.20.8",
    "yaml": "^2.1.1"
  },
  "displayName": "Danceflow",
  "publisher": "reddev",
  "categories": [
    "Keymaps",
    "Other"
  ],
  "readme": "README.md",
  "icon": "assets/danceflow.png",
  "activationEvents": [
    "*"
  ],
  "extensionKind": [
    "ui",
    "workspace"
  ],
  "danceflow.disableArbitraryCodeExecution": false,
  "danceflow.disableArbitraryCommandExecution": false,
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": "limited",
      "description": "Existing menu items and mode commands can only be updated if the current workspace is trusted in order to ensure untrusted workspaces do not execute malicious commands."
    },
    "virtualWorkspaces": true
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Danceflow",
      "properties": {
        "danceflow.defaultMode": {
          "type": "string",
          "scope": "language-overridable",
          "default": "move",
          "description": "Controls which mode is set by default when an editor is opened.",
          "pattern": "^[a-zA-Z]\\w*(\\/\\w+)?$",
          "patternErrorMessage": ""
        },
        "danceflow.modes": {
          "type": "object",
          "scope": "language-overridable",
          "additionalProperties": {
            "type": "object",
            "propertyNames": {
              "pattern": "^[a-zA-Z]\\w*(\\/\\w+)?$",
              "patternErrorMessage": ""
            },
            "properties": {
              "inheritFrom": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Controls how default configuration options are obtained for this mode. Specify a string to inherit from the mode with the given name, and null to inherit from the VS Code configuration.",
                "pattern": "^[a-zA-Z]\\w*(\\/\\w+)?$",
                "patternErrorMessage": ""
              },
              "cursorStyle": {
                "enum": [
                  "line",
                  "block",
                  "underline",
                  "line-thin",
                  "block-outline",
                  "underline-thin",
                  "inherit",
                  null
                ],
                "description": "Controls the cursor style."
              },
              "lineHighlight": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "Controls the line highlighting applied to active lines. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null.",
                "deprecationMessage": "`lineHighlight` is deprecated. Use `danceflow.modes.*.backgroundColor` instead.",
                "markdownDeprecationMessage": "`lineHighlight` is deprecated. Use `#danceflow.modes#.*.backgroundColor` instead.",
                "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
              },
              "lineNumbers": {
                "enum": [
                  "off",
                  "on",
                  "relative",
                  "inherit",
                  null
                ],
                "description": "Controls the display of line numbers.",
                "enumDescriptions": [
                  "No line numbers.",
                  "Absolute line numbers.",
                  "Relative line numbers.",
                  "Inherit from `editor.lineNumbers`."
                ]
              },
              "onEnterMode": {
                "type": "array",
                "items": {
                  "type": [
                    "array",
                    "object",
                    "string"
                  ],
                  "properties": {
                    "command": {
                      "type": "string"
                    },
                    "args": {}
                  },
                  "required": [
                    "command"
                  ]
                },
                "description": "Controls what commands should be executed upon entering this mode."
              },
              "onLeaveMode": {
                "type": "array",
                "items": {
                  "type": [
                    "array",
                    "object",
                    "string"
                  ],
                  "properties": {
                    "command": {
                      "type": "string"
                    },
                    "args": {}
                  },
                  "required": [
                    "command"
                  ]
                },
                "description": "Controls what commands should be executed upon leaving this mode."
              },
              "selectionBehavior": {
                "enum": [
                  "caret",
                  "character",
                  null
                ],
                "default": "caret",
                "description": "Controls how selections behave within VS Code.",
                "markdownEnumDescriptions": [
                  "Selections are anchored to carets, which is the native VS Code behavior; that is, they are positioned *between* characters and can therefore be empty.",
                  "Selections are anchored to characters, like Kakoune; that is, they are positioned *on* characters, and therefore cannot be empty. Additionally, one-character selections will behave as if they were non-directional, like Kakoune."
                ]
              },
              "decorations": {
                "type": [
                  "array",
                  "object",
                  "null"
                ],
                "properties": {
                  "applyTo": {
                    "enum": [
                      "all",
                      "main",
                      "secondary"
                    ],
                    "default": "all",
                    "description": "The selections to apply this style to.",
                    "enumDescriptions": [
                      "Apply to all selections.",
                      "Apply to main selection only.",
                      "Apply to all selections except main selection."
                    ]
                  },
                  "backgroundColor": {
                    "type": "string",
                    "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                    "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                  },
                  "borderColor": {
                    "type": "string",
                    "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                    "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                  },
                  "borderStyle": {
                    "type": "string"
                  },
                  "borderWidth": {
                    "type": "string"
                  },
                  "borderRadius": {
                    "type": "string"
                  },
                  "isWholeLine": {
                    "type": "boolean",
                    "default": false
                  },
                  "after": {
                    "type": "object"
                  },
                  "before": {
                    "type": "object"
                  }
                },
                "description": "The decorations to apply to selections.",
                "items": {
                  "type": "object",
                  "properties": {
                    "applyTo": {
                      "enum": [
                        "all",
                        "main",
                        "secondary"
                      ],
                      "default": "all",
                      "description": "The selections to apply this style to.",
                      "enumDescriptions": [
                        "Apply to all selections.",
                        "Apply to main selection only.",
                        "Apply to all selections except main selection."
                      ]
                    },
                    "backgroundColor": {
                      "type": "string",
                      "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                      "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                    },
                    "borderColor": {
                      "type": "string",
                      "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                      "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                    },
                    "borderStyle": {
                      "type": "string"
                    },
                    "borderWidth": {
                      "type": "string"
                    },
                    "borderRadius": {
                      "type": "string"
                    },
                    "isWholeLine": {
                      "type": "boolean",
                      "default": false
                    },
                    "after": {
                      "type": "object"
                    },
                    "before": {
                      "type": "object"
                    }
                  }
                }
              },
              "hiddenSelectionsIndicatorsDecoration": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "applyTo": {
                    "enum": [
                      "all",
                      "main",
                      "secondary"
                    ],
                    "default": "all",
                    "description": "The selections to apply this style to.",
                    "enumDescriptions": [
                      "Apply to all selections.",
                      "Apply to main selection only.",
                      "Apply to all selections except main selection."
                    ]
                  },
                  "backgroundColor": {
                    "type": "string",
                    "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                    "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                  },
                  "borderColor": {
                    "type": "string",
                    "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|#[a-fA-F0-9]{8}|\\$([a-zA-Z]+(\\.[a-zA-Z]+)+))$",
                    "patternErrorMessage": "Color should be an hex color or a '$' sign followed by a color identifier."
                  },
                  "borderStyle": {
                    "type": "string"
                  },
                  "borderWidth": {
                    "type": "string"
                  },
                  "borderRadius": {
                    "type": "string"
                  },
                  "isWholeLine": {
                    "type": "boolean",
                    "default": false
                  },
                  "after": {
                    "type": "object"
                  },
                  "before": {
                    "type": "object"
                  }
                },
                "description": "The decorations to apply to the hidden selections indicator, shown when some selections are below or above the lines currently shown in the editor. Specify an empty object {} to disable this indicator."
              },
              "activeGroups": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "Controls which keybinding groups should be active in this mode. The 'global' group is always active regardless of this setting.",
                "items": {
                  "enum": [
                    "inspect",
                    "interact",
                    "change",
                    "selectedMove",
                    "move"
                  ],
                  "enumDescriptions": [
                    "Keys for inspecting code elements like definitions, references, etc.",
                    "Keys for interacting with the editor without changing content (copy, etc.)",
                    "Keys for changing content (delete, paste, etc.)",
                    "Keys for selection movement operations",
                    "Keys for cursor movement operations"
                  ]
                }
              }
            },
            "additionalProperties": false
          },
          "default": {
            "": {
              "hiddenSelectionsIndicatorsDecoration": {
                "after": {
                  "color": "$list.warningForeground"
                },
                "backgroundColor": "$inputValidation.warningBackground",
                "borderColor": "$inputValidation.warningBorder",
                "borderStyle": "solid",
                "borderWidth": "1px"
              }
            },
            "modify": {
              "onLeaveMode": [
                [
                  ".selections.save",
                  {
                    "register": " modify"
                  }
                ]
              ],
              "activeGroups": []
            },
            "select": {
              "cursorStyle": "underline",
              "selectionBehavior": "character",
              "activeGroups": [
                "interact",
                "selectedMove",
                "change"
              ]
            },
            "move": {
              "cursorStyle": "block",
              "selectionBehavior": "character",
              "decorations": {
                "applyTo": "main",
                "backgroundColor": "$editor.hoverHighlightBackground"
              },
              "onEnterMode": [
                [
                  ".selections.restore",
                  {
                    "register": " ^",
                    "try": true
                  }
                ]
              ],
              "onLeaveMode": [
                [
                  ".selections.save",
                  {
                    "register": " ^",
                    "style": {
                      "borderColor": "$editor.selectionBackground",
                      "borderStyle": "solid",
                      "borderWidth": "2px",
                      "borderRadius": "1px"
                    },
                    "until": [
                      [
                        "mode-did-change",
                        {
                          "include": "move"
                        }
                      ],
                      [
                        "selections-did-change"
                      ]
                    ]
                  }
                ]
              ],
              "activeGroups": [
                "interact",
                "change",
                "move"
              ]
            },
            "inspect": {
              "activeGroups": [
                "inspect",
                "interact",
                "change",
                "move"
              ]
            }
          },
          "description": "Controls the different modes available in Danceflow."
        },
        "danceflow.menus": {
          "type": "object",
          "scope": "language-overridable",
          "description": "Controls the different menus available in Danceflow.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Text shown in the menu."
                    },
                    "command": {
                      "type": "string",
                      "description": "Command to execute on item selection."
                    },
                    "args": {
                      "type": "array",
                      "description": "Arguments to the command to execute."
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              }
            },
            "additionalProperties": false
          },
          "default": {
            "match": {
              "title": "Match",
              "items": {
                "m": {
                  "command": "danceflow.seek.enclosing",
                  "text": "Goto matching bracket"
                },
                "a": {
                  "command": "danceflow.openMenu",
                  "args": [
                    {
                      "menu": "object",
                      "title": "Match around"
                    }
                  ],
                  "text": "Select around object"
                },
                "i": {
                  "command": "danceflow.openMenu",
                  "args": [
                    {
                      "menu": "object",
                      "title": "Match inside",
                      "pass": [
                        {
                          "inner": true
                        }
                      ]
                    }
                  ],
                  "text": "Select inside object"
                }
              }
            },
            "object": {
              "title": "Select object...",
              "items": {
                "()": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "\\((?#inner)\\)"
                    }
                  ],
                  "text": "parenthesis block"
                },
                "{}": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "\\{(?#inner)\\}"
                    }
                  ],
                  "text": "braces block"
                },
                "[]": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "\\[(?#inner)\\]"
                    }
                  ],
                  "text": "brackets block"
                },
                "<>": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "<(?#inner)>"
                    }
                  ],
                  "text": "angle block"
                },
                "\"": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "(?#noescape)\"(?#inner)(?#noescape)\""
                    }
                  ],
                  "text": "double quote string"
                },
                "'": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "(?#noescape)'(?#inner)(?#noescape)'"
                    }
                  ],
                  "text": "single quote string"
                },
                "`": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "(?#noescape)`(?#inner)(?#noescape)`"
                    }
                  ],
                  "text": "grave quote string"
                },
                "w": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "[\\p{L}_\\d]+(?<after>[^\\S\\n]+)"
                    }
                  ],
                  "text": "word"
                },
                "W": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "[\\S]+(?<after>[^\\S\\n]+)"
                    }
                  ],
                  "text": "WORD"
                },
                "p": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "(?#predefined=paragraph)"
                    }
                  ],
                  "text": "paragraph"
                },
                "a": {
                  "command": "danceflow.seek.object",
                  "args": [
                    {
                      "input": "(?#predefined=argument)"
                    }
                  ],
                  "text": "argument"
                },
                "!": {
                  "command": "danceflow.seek.object",
                  "text": "custom object desc"
                }
              }
            },
            "goto": {
              "title": "Goto",
              "items": {
                "g": {
                  "text": "to line number else file start",
                  "command": "danceflow.select.lineStart",
                  "args": [
                    {
                      "count": 1
                    }
                  ]
                },
                "e": {
                  "text": "to last line",
                  "command": "danceflow.select.lineEnd",
                  "args": [
                    {
                      "count": 2147483647
                    }
                  ]
                },
                "f": {
                  "text": "to file/URLs in selections",
                  "command": "danceflow.selections.open"
                },
                "h": {
                  "text": "to line start",
                  "command": "danceflow.select.lineStart"
                },
                "l": {
                  "text": "to line end",
                  "command": "danceflow.select.lineEnd"
                },
                "s": {
                  "text": "to first non-blank in line",
                  "command": "danceflow.select.lineStart",
                  "args": [
                    {
                      "skipBlank": true
                    }
                  ]
                },
                "d": {
                  "text": "to definition",
                  "command": "editor.action.revealDefinition"
                },
                "r": {
                  "text": "to references",
                  "command": "editor.action.goToReferences"
                },
                "j": {
                  "text": "to last line",
                  "command": "danceflow.select.lastLine"
                },
                "t": {
                  "text": "to window top",
                  "command": "danceflow.select.firstVisibleLine"
                },
                "c": {
                  "text": "to window center",
                  "command": "danceflow.select.middleVisibleLine"
                },
                "b": {
                  "text": "to window bottom",
                  "command": "danceflow.select.lastVisibleLine"
                },
                "a": {
                  "text": "to last buffer",
                  "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup"
                },
                "A": {
                  "text": "to last buffer...",
                  "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
                },
                "p": {
                  "text": "to previous buffer",
                  "command": "workbench.action.previousEditor"
                },
                "n": {
                  "text": "to next buffer",
                  "command": "workbench.action.nextEditor"
                },
                ".": {
                  "text": "to last buffer modification position",
                  "command": "danceflow.selections.restore",
                  "args": [
                    {
                      "register": " modify"
                    }
                  ]
                }
              }
            },
            "view": {
              "title": "View",
              "items": {
                "cz": {
                  "text": "Align view center",
                  "command": "danceflow.view.line",
                  "args": [
                    {
                      "at": "center"
                    }
                  ]
                },
                "t": {
                  "text": "Align view top",
                  "command": "danceflow.view.line",
                  "args": [
                    {
                      "at": "top"
                    }
                  ]
                },
                "b": {
                  "text": "Align view bottom",
                  "command": "danceflow.view.line",
                  "args": [
                    {
                      "at": "bottom"
                    }
                  ]
                },
                "k": {
                  "text": "Scroll view up",
                  "command": "editorScroll",
                  "args": [
                    {
                      "by": "line",
                      "revealCursor": true,
                      "to": "up"
                    }
                  ]
                },
                "j": {
                  "text": "Scroll view down",
                  "command": "editorScroll",
                  "args": [
                    {
                      "by": "line",
                      "revealCursor": true,
                      "to": "down"
                    }
                  ]
                },
                "/": {
                  "text": "Search for regex pattern",
                  "command": "danceflow.search"
                },
                "?": {
                  "text": "Reverse search for regex pattern",
                  "command": "danceflow.search.backward"
                },
                "n": {
                  "text": "Select next search match",
                  "command": "danceflow.search.next"
                },
                "N": {
                  "text": "Select previous search match",
                  "command": "danceflow.search.previous"
                }
              }
            }
          }
        },
        "danceflow.systemClipboardRegister": {
          "enum": [
            "dquote",
            null,
            "b",
            "e",
            "f",
            "g",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "t",
            "v",
            "w",
            "x",
            "y",
            "z",
            "*",
            "+"
          ],
          "enumItemLabels": [
            "\"",
            "None"
          ],
          "enumDescriptions": [
            "The default yank register",
            "Disables using the system clipboard"
          ],
          "default": "dquote",
          "description": "Controls which register maps to the system clipboard."
        },
        "danceflow.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the Danceflow keybindings are enabled.",
          "deprecationMessage": "danceflow.enabled is deprecated; disable the Danceflow extension instead."
        },
        "danceflow.moveMode.lineHighlight": {
          "type": [
            "string",
            "null"
          ],
          "default": "editor.hoverHighlightBackground",
          "markdownDescription": "Controls the line highlighting applied to active lines in move mode. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null.",
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.modifyMode.lineHighlight": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "markdownDescription": "Controls the line highlighting applied to active lines in modify mode. Can be an hex color, a [theme color](https://code.visualstudio.com/api/references/theme-color) or null.",
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.moveMode.lineNumbers": {
          "enum": [
            "off",
            "on",
            "relative",
            "inherit"
          ],
          "default": "relative",
          "description": "Controls the display of line numbers in move mode.",
          "enumDescriptions": [
            "No line numbers.",
            "Absolute line numbers.",
            "Relative line numbers.",
            "Inherit from `editor.lineNumbers`."
          ],
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.modifyMode.lineNumbers": {
          "enum": [
            "off",
            "on",
            "relative",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the display of line numbers in modify mode.",
          "enumDescriptions": [
            "No line numbers.",
            "Absolute line numbers.",
            "Relative line numbers.",
            "Inherit from `editor.lineNumbers`."
          ],
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.moveMode.cursorStyle": {
          "enum": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the cursor style in move mode.",
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.modifyMode.cursorStyle": {
          "enum": [
            "line",
            "block",
            "underline",
            "line-thin",
            "block-outline",
            "underline-thin",
            "inherit"
          ],
          "default": "inherit",
          "description": "Controls the cursor style in modify mode.",
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.modifyMode.selectionStyle": {
          "type": "object",
          "default": {
            "borderColor": "$editor.selectionBackground",
            "borderStyle": "solid",
            "borderWidth": "2px",
            "borderRadius": "1px"
          },
          "description": "The style to apply to selections in modify mode.",
          "properties": {
            "backgroundColor": {
              "type": "string"
            },
            "borderColor": {
              "type": "string"
            },
            "borderStyle": {
              "type": "string"
            },
            "borderWidth": {
              "type": "string"
            },
            "borderRadius": {
              "type": "string"
            }
          },
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        },
        "danceflow.selectionBehavior": {
          "enum": [
            "caret",
            "character"
          ],
          "default": "caret",
          "description": "Controls how selections behave within VS Code.",
          "markdownEnumDescriptions": [
            "Selections are anchored to carets, which is the native VS Code behavior; that is, they are positioned *between* characters and can therefore be empty.",
            "Selections are anchored to characters, like Kakoune; that is, they are positioned *on* characters, and therefore cannot be empty. Additionally, one-character selections will behave as if they were non-directional, like Kakoune."
          ],
          "markdownDeprecationMessage": "Built-in modes are deprecated. Use `#danceflow.modes#` instead."
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "danceflow",
          "title": "Danceflow",
          "icon": "assets/danceflow-white.svg"
        }
      ]
    },
    "views": {
      "danceflow": [
        {
          "id": "registers",
          "name": "Registers"
        }
      ]
    },
    "commands": [
      {
        "command": "danceflow.dev.copyLastErrorMessage",
        "title": "Copies the last encountered error message",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.dev.setSelectionBehavior",
        "title": "Set the selection behavior of the specified mode",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.align",
        "title": "Align selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.case.swap",
        "title": "Swap case",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.case.toLower",
        "title": "Transform to lower case",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.case.toUpper",
        "title": "Transform to upper case",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.copyIndentation",
        "title": "Copy indentation",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.deindent",
        "title": "Deindent selected lines",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.deindent.withIncomplete",
        "title": "Deindent selected lines (including incomplete indent)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.delete",
        "title": "Delete",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.delete-modify",
        "title": "Delete and switch to Modify",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.indent",
        "title": "Indent selected lines",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.indent.withEmpty",
        "title": "Indent selected lines (including empty lines)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.insert",
        "title": "Insert contents of register",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.join",
        "title": "Join lines",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.join.select",
        "title": "Join lines and select inserted separators",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.newLine.above",
        "title": "Insert new line above each selection",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.newLine.above.modify",
        "title": "Insert new line above and switch to modify",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.newLine.below",
        "title": "Insert new line below each selection",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.newLine.below.modify",
        "title": "Insert new line below and switch to modify",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.paste.after",
        "title": "Paste after",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.paste.after.select",
        "title": "Paste after and select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.paste.before",
        "title": "Paste before",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.paste.before.select",
        "title": "Paste before and select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.pasteAll.after",
        "title": "Paste all after",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.pasteAll.after.select",
        "title": "Paste all after and select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.pasteAll.before",
        "title": "Paste all before",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.pasteAll.before.select",
        "title": "Paste all before and select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.replace",
        "title": "Replace",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.replaceCharacters",
        "title": "Replace characters",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.selectRegister-insert",
        "title": "Pick register and replace",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.yank-delete",
        "title": "Copy and delete",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.yank-delete-modify",
        "title": "Copy, delete and switch to Modify",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.edit.yank-replace",
        "title": "Copy and replace",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.recording.play",
        "title": "Replay recording",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.recording.start",
        "title": "Start recording",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.recording.stop",
        "title": "Stop recording",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.redo",
        "title": "Redo",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.redo.selections",
        "title": "Redo a change of selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.repeat",
        "title": "Repeat last change",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.repeat.edit",
        "title": "Repeat last edit without a command",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.repeat.seek",
        "title": "Repeat last seek",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.repeat.selection",
        "title": "Repeat last selection change",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.undo",
        "title": "Undo",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.history.undo.selections",
        "title": "Undo a change of selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.cancel",
        "title": "Cancel Danceflow operation",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.changeInput",
        "title": "Change current input",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.ifEmpty",
        "title": "Executes one of the specified commands depending on whether the current\nselections are empty",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.ignore",
        "title": "Ignore key",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.openMenu",
        "title": "Open menu",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.run",
        "title": "Run code",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selectRegister",
        "title": "Select register for next command",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.updateCount",
        "title": "Update Danceflow count",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.updateRegister",
        "title": "Update the contents of a register",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.modify.after",
        "title": "Modify after",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.modify.before",
        "title": "Modify before",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.modify.lineEnd",
        "title": "Modify at line end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.modify.lineStart",
        "title": "Modify at line start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set",
        "title": "Set Danceflow mode",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.inspect",
        "title": "Set mode to Select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.modify",
        "title": "Set mode to Modify",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.move",
        "title": "Set mode to Move",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.select",
        "title": "Set mode to Select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.temporarily",
        "title": "Set Danceflow mode temporarily",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.temporarily.modify",
        "title": "Temporary Modify mode",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.modes.set.temporarily.move",
        "title": "Temporary Move mode",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search",
        "title": "Search",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.backward",
        "title": "Search backward",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.backward.extend",
        "title": "Search backward (extend)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.extend",
        "title": "Search (extend)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.next",
        "title": "Select next match",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.next.add",
        "title": "Add next match",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.previous",
        "title": "Select previous match",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.previous.add",
        "title": "Add previous match",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.selection",
        "title": "Search current selection",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.search.selection.smart",
        "title": "Search current selection (smart)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek",
        "title": "Select to character (excluded)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject",
        "title": "Select whole object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.end",
        "title": "Select to whole object end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.end.extend",
        "title": "Extend to whole object end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.inner",
        "title": "Select inner object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.inner.end",
        "title": "Select to inner object end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.inner.end.extend",
        "title": "Extend to inner object end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.inner.start",
        "title": "Select to inner object start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.inner.start.extend",
        "title": "Extend to inner object start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.start",
        "title": "Select to whole object start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.askObject.start.extend",
        "title": "Extend to whole object start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.backward",
        "title": "Select to character (excluded, backward)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.enclosing",
        "title": "Select to next enclosing character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.enclosing.backward",
        "title": "Select to previous enclosing character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.enclosing.extend",
        "title": "Extend to next enclosing character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.enclosing.extend.backward",
        "title": "Extend to previous enclosing character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.extend",
        "title": "Extend to character (excluded)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.extend.backward",
        "title": "Extend to character (excluded, backward)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.included",
        "title": "Select to character (included)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.included.backward",
        "title": "Select to character (included, backward)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.included.extend",
        "title": "Extend to character (included)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.included.extend.backward",
        "title": "Extend to character (included, backward)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.leap",
        "title": "Leap forward",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.leap.backward",
        "title": "Leap backward",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.object",
        "title": "Select object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.syntax.child.experimental",
        "title": "Select child syntax object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.syntax.experimental",
        "title": "Select syntax object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.syntax.next.experimental",
        "title": "Select next syntax object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.syntax.parent.experimental",
        "title": "Select parent syntax object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.syntax.previous.experimental",
        "title": "Select previous syntax object",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word",
        "title": "Select to next word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.backward",
        "title": "Select to previous word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.extend",
        "title": "Extend to next word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.extend.backward",
        "title": "Extend to previous word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.ws",
        "title": "Select to next non-whitespace word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.ws.backward",
        "title": "Select to previous non-whitespace word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.ws.extend",
        "title": "Extend to next non-whitespace word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.word.ws.extend.backward",
        "title": "Extend to previous non-whitespace word start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.wordEnd",
        "title": "Select to next word end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.wordEnd.extend",
        "title": "Extend to next word end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.wordEnd.ws",
        "title": "Select to next non-whitespace word end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.seek.wordEnd.ws.extend",
        "title": "Extend to next non-whitespace word end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.buffer",
        "title": "Select whole buffer",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.documentEnd.extend",
        "title": "Extend to last character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.documentEnd.jump",
        "title": "Jump to last character",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.down.extend",
        "title": "Extend down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.down.jump",
        "title": "Jump down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.firstLine.extend",
        "title": "Extend to first line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.firstLine.jump",
        "title": "Jump to first line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.firstVisibleLine",
        "title": "Select to first visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.firstVisibleLine.extend",
        "title": "Extend to first visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.firstVisibleLine.jump",
        "title": "Jump to first visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.halfPageDown.extend",
        "title": "Half page down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.halfPageDown.jump",
        "title": "Half page down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.halfPageUp.extend",
        "title": "Half page up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.halfPageUp.jump",
        "title": "Half page up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.horizontally",
        "title": "Select horizontally",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastLine",
        "title": "Select to last line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastLine.extend",
        "title": "Extend to last line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastLine.jump",
        "title": "Jump to last line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastVisibleLine",
        "title": "Select to last visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastVisibleLine.extend",
        "title": "Extend to last visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lastVisibleLine.jump",
        "title": "Jump to last visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.left.extend",
        "title": "Extend left",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.left.jump",
        "title": "Jump left",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.line.above",
        "title": "Select line above",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.line.above.extend",
        "title": "Extend to line above",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.line.below",
        "title": "Select line below",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.line.below.extend",
        "title": "Extend to line below",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineEnd",
        "title": "Select to line end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineEnd.extend",
        "title": "Extend to line end",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineStart",
        "title": "Select to line start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineStart.extend",
        "title": "Extend to line start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineStart.jump",
        "title": "Jump to line start",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineStart.skipBlank.extend",
        "title": "Extend to line start (skip blank)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.lineStart.skipBlank.jump",
        "title": "Jump to line start (skip blank)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.middleVisibleLine",
        "title": "Select to middle visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.middleVisibleLine.extend",
        "title": "Extend to middle visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.middleVisibleLine.jump",
        "title": "Jump to middle visible line",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.pageDown.extend",
        "title": "Page down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.pageDown.jump",
        "title": "Page down",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.pageUp.extend",
        "title": "Page up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.pageUp.jump",
        "title": "Page up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.right.extend",
        "title": "Extend right",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.right.jump",
        "title": "Jump right",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.to",
        "title": "Select to",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.to.extend",
        "title": "Extend to",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.to.jump",
        "title": "Go to",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.up.extend",
        "title": "Extend up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.up.jump",
        "title": "Jump up",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.select.vertically",
        "title": "Select vertically",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.changeDirection",
        "title": "Change direction of selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.changeOrder",
        "title": "Reverse selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.clear.main",
        "title": "Clear main selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.clear.secondary",
        "title": "Clear secondary selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.copy",
        "title": "Copy selections below",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.copy.above",
        "title": "Copy selections above",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.expandToLines",
        "title": "Expand to lines",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.faceBackward",
        "title": "Backward selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.faceForward",
        "title": "Forward selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.filter",
        "title": "Filter selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.filter.regexp",
        "title": "Keep matching selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.filter.regexp.inverse",
        "title": "Clear matching selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.hideIndices",
        "title": "Hide selection indices",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.merge",
        "title": "Merge contiguous selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.open",
        "title": "Open selected file",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.orderAscending",
        "title": "Order selections ascending",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.orderDescending",
        "title": "Order selections descending",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.pipe",
        "title": "Pipe selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.pipe.append",
        "title": "Pipe and append",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.pipe.prepend",
        "title": "Pipe and prepend",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.pipe.replace",
        "title": "Pipe and replace",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.reduce",
        "title": "Reduce selections to their cursor",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.reduce.edges",
        "title": "Reduce selections to their ends",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.restore",
        "title": "Restore selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.restore.withCurrent",
        "title": "Combine register selections with current ones",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.save",
        "title": "Save selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.saveText",
        "title": "Copy selections text",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.select",
        "title": "Select within selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.select.orLeap",
        "title": "Leap or select",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.showIndices",
        "title": "Show selection indices",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.sort",
        "title": "Sort selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.split",
        "title": "Split selections",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.splitLines",
        "title": "Split selections at line boundaries",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.splitLines.orLeap.backward",
        "title": "Split selections at line boundaries or leap backwards",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.toggleIndices",
        "title": "Toggle selection indices",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.trimLines",
        "title": "Trim lines",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.trimWhitespace",
        "title": "Trim whitespace",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.both",
        "title": "Rotate selections clockwise",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.both.reverse",
        "title": "Rotate selections counter-clockwise",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.contents",
        "title": "Rotate selections clockwise (contents only)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.contents.reverse",
        "title": "Rotate selections counter-clockwise (contents only)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.selections",
        "title": "Rotate selections clockwise (selections only)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.selections.rotate.selections.reverse",
        "title": "Rotate selections counter-clockwise (selections only)",
        "category": "Danceflow"
      },
      {
        "command": "danceflow.view.line",
        "title": "Reveals a position based on the main cursor",
        "category": "Danceflow"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "danceflow.dev.copyLastErrorMessage",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.dev.setSelectionBehavior",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.align",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.case.swap",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.case.toLower",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.case.toUpper",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.copyIndentation",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.deindent",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.deindent.withIncomplete",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.delete",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.delete-modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.indent",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.indent.withEmpty",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.insert",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.join",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.join.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.newLine.above",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.newLine.above.modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.newLine.below",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.newLine.below.modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.paste.after",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.paste.after.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.paste.before",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.paste.before.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.pasteAll.after",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.pasteAll.after.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.pasteAll.before",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.pasteAll.before.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.replace",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.replaceCharacters",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.selectRegister-insert",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.yank-delete",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.yank-delete-modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.edit.yank-replace",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.recording.play",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.recording.start",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.recording.stop",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.redo",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.redo.selections",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.repeat",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.repeat.edit",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.repeat.seek",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.repeat.selection",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.undo",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.history.undo.selections",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.cancel",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.changeInput",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.ifEmpty",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.ignore",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.openMenu",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.run",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selectRegister",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.updateCount",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.updateRegister",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.modify.after",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.modify.before",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.modify.lineEnd",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.modify.lineStart",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.inspect",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.move",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.temporarily",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.temporarily.modify",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.modes.set.temporarily.move",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.backward.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.next",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.next.add",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.previous",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.previous.add",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.selection",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.search.selection.smart",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.end",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.end.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.inner",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.inner.end",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.inner.end.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.inner.start",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.inner.start.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.start",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.askObject.start.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.enclosing",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.enclosing.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.enclosing.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.enclosing.extend.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.extend.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.included",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.included.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.included.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.included.extend.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.leap",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.leap.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.object",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.syntax.child.experimental",
          "when": "danceflow.mode == 'move' && tree-sitter.activeEditorIsSupported"
        },
        {
          "command": "danceflow.seek.syntax.experimental",
          "when": "danceflow.mode == 'move' && tree-sitter.activeEditorIsSupported"
        },
        {
          "command": "danceflow.seek.syntax.next.experimental",
          "when": "danceflow.mode == 'move' && tree-sitter.activeEditorIsSupported"
        },
        {
          "command": "danceflow.seek.syntax.parent.experimental",
          "when": "danceflow.mode == 'move' && tree-sitter.activeEditorIsSupported"
        },
        {
          "command": "danceflow.seek.syntax.previous.experimental",
          "when": "danceflow.mode == 'move' && tree-sitter.activeEditorIsSupported"
        },
        {
          "command": "danceflow.seek.word",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.extend.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.ws",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.ws.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.ws.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.word.ws.extend.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.wordEnd",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.wordEnd.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.wordEnd.ws",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.seek.wordEnd.ws.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.buffer",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.documentEnd.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.documentEnd.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.down.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.down.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.firstLine.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.firstLine.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.firstVisibleLine",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.firstVisibleLine.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.firstVisibleLine.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.halfPageDown.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.halfPageDown.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.halfPageUp.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.halfPageUp.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.horizontally",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastLine",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastLine.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastLine.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastVisibleLine",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastVisibleLine.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lastVisibleLine.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.left.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.left.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.line.above",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.line.above.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.line.below",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.line.below.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineEnd",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineEnd.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineStart",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineStart.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineStart.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineStart.skipBlank.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.lineStart.skipBlank.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.middleVisibleLine",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.middleVisibleLine.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.middleVisibleLine.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.pageDown.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.pageDown.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.pageUp.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.pageUp.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.right.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.right.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.to",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.to.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.to.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.up.extend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.up.jump",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.select.vertically",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.changeDirection",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.changeOrder",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.clear.main",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.clear.secondary",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.copy",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.copy.above",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.expandToLines",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.faceBackward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.faceForward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.filter",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.filter.regexp",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.filter.regexp.inverse",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.hideIndices",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.merge",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.open",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.orderAscending",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.orderDescending",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.pipe",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.pipe.append",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.pipe.prepend",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.pipe.replace",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.reduce",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.reduce.edges",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.restore",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.restore.withCurrent",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.save",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.saveText",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.select",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.select.orLeap",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.showIndices",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.sort",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.split",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.splitLines",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.splitLines.orLeap.backward",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.toggleIndices",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.trimLines",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.trimWhitespace",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.both",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.both.reverse",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.contents",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.contents.reverse",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.selections",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.selections.rotate.selections.reverse",
          "when": "danceflow.mode == 'move'"
        },
        {
          "command": "danceflow.view.line",
          "when": "danceflow.mode == 'move'"
        }
      ]
    },
    "keybindings": [
      {
        "key": "esc",
        "command": "danceflow.cancel"
      },
      {
        "key": "esc",
        "command": "danceflow.modes.set.move"
      },
      {
        "key": "shift+1",
        "command": "danceflow.togglePanel.git"
      },
      {
        "key": "ctrl+shift+g",
        "command": "danceflow.togglePanel.git"
      },
      {
        "key": "shift+2",
        "command": "danceflow.togglePanel.explorer"
      },
      {
        "key": "ctrl+shift+e",
        "command": "danceflow.togglePanel.explorer"
      },
      {
        "key": "shift+3",
        "command": "danceflow.togglePanel.chat"
      },
      {
        "key": "ctrl+shift+c",
        "command": "danceflow.togglePanel.chat"
      },
      {
        "key": "shift+4",
        "command": "danceflow.togglePanel.search"
      },
      {
        "key": "ctrl+shift+s",
        "command": "danceflow.togglePanel.search"
      },
      {
        "key": "shift+5",
        "command": "danceflow.togglePanel.timeline"
      },
      {
        "key": "ctrl+shift+t",
        "command": "danceflow.togglePanel.timeline"
      },
      {
        "key": "shift+6",
        "command": "danceflow.togglePanel.outline"
      },
      {
        "key": "ctrl+shift+l",
        "command": "danceflow.togglePanel.outline"
      },
      {
        "key": "shift+7",
        "command": "danceflow.togglePanel.debug"
      },
      {
        "key": "ctrl+shift+b",
        "command": "danceflow.togglePanel.debug"
      },
      {
        "key": "shift+8",
        "command": "danceflow.togglePanel.extensions"
      },
      {
        "key": "ctrl+shift+x",
        "command": "danceflow.togglePanel.extensions"
      },
      {
        "key": "ctrl+p",
        "command": "workbench.action.moveEditorToNewWindow"
      },
      {
        "key": "ctrl+alt+p",
        "command": "workbench.action.moveEditorToFirstGroup"
      },
      {
        "key": "ctrl+m",
        "command": "workbench.action.newWindow"
      },
      {
        "key": "ctrl+shift+f",
        "command": "workbench.action.quickTextSearch"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.showAllSymbols"
      },
      {
        "key": "ctrl+f",
        "command": "actions.find",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+f",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorTextFocus"
      },
      {
        "key": "n",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+n",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker"
      },
      {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
      },
      {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor"
      },
      {
        "key": "ctrl+s",
        "command": "workbench.action.files.save",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+o",
        "command": "workbench.action.files.openFile"
      },
      {
        "key": "ctrl+r",
        "command": "workbench.action.openRecent"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
      },
      {
        "key": "ctrl+h",
        "command": "C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+shift+o",
        "command": "workbench.action.files.newUntitledFile"
      },
      {
        "key": "u",
        "command": "danceflow.history.undo",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+z",
        "command": "danceflow.history.undo",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+shift+y",
        "command": "danceflow.history.undo",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+u",
        "command": "danceflow.history.redo",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+shift+z",
        "command": "danceflow.history.redo",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+y",
        "command": "danceflow.history.redo",
        "when": "editorTextFocus"
      },
      {
        "key": "f",
        "command": "editor.action.revealDefinition",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "t",
        "command": "editor.action.goToTypeDefinition",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "z",
        "command": "editor.action.goToImplementation",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "g",
        "command": "editor.action.goToReferences",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "r",
        "command": "editor.action.rename",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "shift+r",
        "command": "danceflow.inspect.renameToClipboard",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "y",
        "command": "danceflow.inspect.copySymbol",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "ctrl+c",
        "command": "danceflow.inspect.copySymbol",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "shift+y",
        "command": "danceflow.inspect.copyInfo",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "space",
        "command": "editor.action.quickFix",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "e",
        "command": "editor.action.marker.next",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "shift+e",
        "command": "editor.action.marker.prev",
        "when": "editorTextFocus && danceflow.inspect.active"
      },
      {
        "key": "y",
        "command": "editor.action.clipboardCopyAction",
        "when": "editorTextFocus && danceflow.interact.active && !danceflow.inspect.active"
      },
      {
        "key": "ctrl+c",
        "command": "editor.action.clipboardCopyAction",
        "when": "editorTextFocus && danceflow.interact.active && !danceflow.inspect.active"
      },
      {
        "key": "space",
        "command": "danceflow.modes.set.inspect",
        "when": "editorTextFocus && danceflow.interact.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+q",
        "command": "danceflow.history.recording.toggle",
        "when": "editorTextFocus && danceflow.interact.active"
      },
      {
        "key": "ctrl+q",
        "command": "danceflow.history.recording.load",
        "when": "editorTextFocus && danceflow.interact.active"
      },
      {
        "key": "ctrl+shift+q",
        "command": "danceflow.history.recording.save",
        "when": "editorTextFocus && danceflow.interact.active"
      },
      {
        "key": "d",
        "command": "danceflow.edit.yank-delete",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+x",
        "command": "danceflow.edit.yank-delete",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+d",
        "command": "danceflow.edit.delete",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "del",
        "command": "danceflow.edit.delete",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "backspace",
        "command": "danceflow.edit.delete",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+d",
        "command": "danceflow.edit.yank-delete.word",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+del",
        "command": "danceflow.edit.delete.word",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+backspace",
        "command": "danceflow.edit.delete.word",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+d",
        "command": "danceflow.edit.yank-delete.line",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+alt+shift+d",
        "command": "danceflow.edit.delete.line",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "p",
        "command": "danceflow.edit.paste.before.select",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+v",
        "command": "danceflow.edit.paste.before.select",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+p",
        "command": "danceflow.edit.paste.after.select",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+shift+v",
        "command": "danceflow.edit.paste.after.select",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+p",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+shift+p",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "i",
        "command": "danceflow.modes.modify.before",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "a",
        "command": "danceflow.modes.modify.after",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+i",
        "command": "danceflow.modes.modify.lineStart",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+a",
        "command": "danceflow.modes.modify.lineEnd",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "o",
        "command": "danceflow.edit.newLine.below.modify",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+o",
        "command": "danceflow.edit.newLine.above.modify",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "c",
        "command": "danceflow.edit.yank-delete-modify",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+alt+c",
        "command": "danceflow.edit.delete-modify",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "r",
        "command": "danceflow.edit.replaceCharacters",
        "when": "editorTextFocus && danceflow.change.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+r",
        "command": "danceflow.edit.yank-replace",
        "when": "editorTextFocus && danceflow.change.active && !danceflow.inspect.active"
      },
      {
        "key": "ctrl+shift+r",
        "command": "danceflow.edit.replace",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+tab",
        "command": "outdent",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "-",
        "command": "danceflow.change.removeEmptyLines",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+space",
        "command": "danceflow.add.space.before",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+shift+space",
        "command": "danceflow.add.space.after",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "enter",
        "command": "danceflow.add.line.below",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+enter",
        "command": "danceflow.add.line.above",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "shift+c",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "\"",
        "command": "danceflow.openMenu",
        "args": {
          "menu": "enclose"
        },
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "=",
        "command": "editor.action.formatSelection",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+=",
        "command": "danceflow.edit.case.swap",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+=",
        "command": "danceflow.edit.case.toLower",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+shift+=",
        "command": "danceflow.edit.case.toUpper",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "q",
        "command": "danceflow.history.recording.play",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": ".",
        "command": "danceflow.history.repeat.edit",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+shift+]",
        "command": "danceflow.selections.rotate.contents",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "alt+shift+[",
        "command": "danceflow.selections.rotate.contents.reverse",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+k",
        "command": "danceflow.number.increment",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+up",
        "command": "danceflow.number.increment",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+j",
        "command": "danceflow.number.decrement",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "ctrl+down",
        "command": "danceflow.number.decrement",
        "when": "editorTextFocus && danceflow.change.active"
      },
      {
        "key": "h",
        "command": "danceflow.select.left.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "j",
        "command": "danceflow.select.down.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "k",
        "command": "danceflow.select.up.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "l",
        "command": "danceflow.select.right.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "w",
        "command": "danceflow.seek.word.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "e",
        "command": "danceflow.seek.wordEnd.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active && !danceflow.inspect.active"
      },
      {
        "key": "b",
        "command": "danceflow.seek.word.backward",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "shift+w",
        "command": "danceflow.seek.word.ws.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "shift+e",
        "command": "danceflow.seek.wordEnd.ws.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+b",
        "command": "danceflow.seek.word.ws.extend.backward",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "f",
        "command": "danceflow.seek.included.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+f",
        "command": "danceflow.seek.included.extend.backward",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "t",
        "command": "danceflow.seek.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+t",
        "command": "danceflow.seek.extend.backward",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+d",
        "command": "danceflow.select.halfPageDown.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active && !danceflow.change.active"
      },
      {
        "key": "ctrl+shift+u",
        "command": "danceflow.select.halfPageDown.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+u",
        "command": "danceflow.select.halfPageUp.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+shift+d",
        "command": "danceflow.select.halfPageUp.extend",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "v",
        "command": "danceflow.modes.set.move",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+n",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+shift+n",
        "command": "editor.action.addSelectionToPreviousFindMatch",
        "when": "editorTextFocus && danceflow.selectedMove.active"
      },
      {
        "key": "h",
        "command": "danceflow.select.left.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "j",
        "command": "danceflow.select.down.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "k",
        "command": "danceflow.select.up.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "l",
        "command": "danceflow.select.right.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "w",
        "command": "danceflow.seek.word",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "e",
        "command": "danceflow.seek.wordEnd",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active && !danceflow.selectedMove.active"
      },
      {
        "key": "b",
        "command": "danceflow.seek.word.backward",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "g",
        "command": "danceflow.get.word",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active"
      },
      {
        "key": "shift+g",
        "command": "danceflow.get.word.ws",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+w",
        "command": "danceflow.seek.word.ws",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "shift+e",
        "command": "danceflow.seek.wordEnd.ws",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active && !danceflow.selectedMove.active"
      },
      {
        "key": "shift+b",
        "command": "danceflow.seek.word.ws.backward",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "f",
        "command": "danceflow.seek.included",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active && !danceflow.selectedMove.active"
      },
      {
        "key": "shift+f",
        "command": "danceflow.seek.included.backward",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "t",
        "command": "danceflow.seek",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active && !danceflow.selectedMove.active"
      },
      {
        "key": "shift+t",
        "command": "danceflow.seek.backward",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "x",
        "command": "danceflow.select.line.below.extend",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+x",
        "command": "danceflow.select.line.above.extend",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "ctrl+d",
        "command": "danceflow.select.halfPageDown.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.change.active && !danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+shift+u",
        "command": "danceflow.select.halfPageDown.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+u",
        "command": "danceflow.select.halfPageUp.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+shift+d",
        "command": "danceflow.select.halfPageUp.jump",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "ctrl+a",
        "command": "editor.action.selectAll",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "z",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.inspect.active"
      },
      {
        "key": "v",
        "command": "danceflow.modes.set.select",
        "when": "editorTextFocus && danceflow.move.active && !danceflow.selectedMove.active"
      },
      {
        "key": "m",
        "command": "danceflow.openMenu",
        "args": {
          "menu": "match"
        },
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "s",
        "command": "danceflow.selections.select.orLeap",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "alt+s",
        "command": "danceflow.selections.split",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+k",
        "command": "danceflow.selections.keepMatching",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+alt+k",
        "command": "danceflow.selections.keepNotMatching",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+m",
        "command": "danceflow.selections.merge",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+s",
        "command": "danceflow.selections.splitLines.orLeap.backward",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": ";",
        "command": "danceflow.selections.reduce",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "shift+;",
        "command": "danceflow.selections.changeDirection",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "'",
        "command": "danceflow.jumppoint.create",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "[",
        "command": "danceflow.jumppoint.previous",
        "when": "editorTextFocus && danceflow.move.active"
      },
      {
        "key": "]",
        "command": "danceflow.jumppoint.next",
        "when": "editorTextFocus && danceflow.move.active"
      }
    ]
  }
}
