cancel:
  title:
    en: Cancel Danceflow operation

  keys:
    qwerty: |-
      `escape` (core: move, !recording, "!markersNavigationVisible")
      `escape` (core: input)

  doc:
    en: |+
      Cancel Danceflow operation.

changeInput:
  title:
    en: Change current input

  doc:
    en: |+
      Change current input.

      When showing some menus, Danceflow can navigate their history:

      | Keybinding            | Command                                    |
      | --------------------- | ------------------------------------------ |
      | `up` (core: prompt)   | `[".changeInput", { action: "previous" }]` |
      | `down` (core: prompt) | `[".changeInput", { action: "next"     }]` |

dev.copyLastErrorMessage:
  title:
    en: Copies the last encountered error message

  doc:
    en: |
      Copies the last encountered error message.

dev.setSelectionBehavior:
  title:
    en: Set the selection behavior of the specified mode

  doc:
    en: |
      Set the selection behavior of the specified mode.

edit.align:
  title:
    en: Align selections

  keys:
    qwerty: |-
      `&` (core: move)

  doc:
    en: |+
      Align selections.

      Align selections, aligning the cursor of each selection by inserting spaces
      before the first character of each selection.

edit.case.swap:
  title:
    en: Swap case

  keys:
    qwerty: |-
      `` a-` `` (kakoune: move)
      `` s-` `` (helix: move)

  doc:
    en: |
      Swap case.

      | Keybindings               | Commands                                     |
      | -----------               | --------                                     |
      | `` s-` `` (helix: select) | `[".edit.case.swap"], [".modes.set.move"]` |

edit.case.toLower:
  title:
    en: Transform to lower case

  keys:
    qwerty: |-
      `` ` `` (core: move)

  doc:
    en: |
      Transform to lower case.

      | Keybindings             | Commands                                        |
      | -----------             | --------                                        |
      | `` ` `` (helix: select) | `[".edit.case.toLower"], [".modes.set.move"]` |

edit.case.toUpper:
  title:
    en: Transform to upper case

  keys:
    qwerty: |-
      `` s-` `` (kakoune: move)
      `` a-` `` (helix: move)

  doc:
    en: |
      Transform to upper case.

      | Keybindings               | Commands                                        |
      | -----------               | --------                                        |
      | `` a-` `` (helix: select) | `[".edit.case.toUpper"], [".modes.set.move"]` |

edit.copyIndentation:
  title:
    en: Copy indentation

  keys:
    qwerty: |-
      `a-&` (kakoune: move)

  doc:
    en: |+
      Copy indentation.

      Copy the indentation of the main selection (or the count one if a count is
      given) to all other ones.

edit.deindent:
  title:
    en: Deindent selected lines

  keys:
    qwerty: |-
      `a-<` (kakoune: move)

  doc:
    en: |+
      Deindent selected lines.

edit.deindent.withIncomplete:
  title:
    en: Deindent selected lines (including incomplete indent)

  keys:
    qwerty: |-
      `<` (core: move)

  doc:
    en: |
      Deindent selected lines (including incomplete indent).

      | Keybindings         | Commands                                    |
      | -----------         | --------                                    |
      | `<` (helix: select) | `[".edit.deindent"], [".modes.set.move"]` |

edit.delete:
  title:
    en: Delete

  commands: |-
    [".edit.insert", { register: "_", $exclude: [] }]

  keys:
    qwerty: |-
      `a-d` (core: move)

edit.delete-modify:
  title:
    en: Delete and switch to Modify

  commands: |-
    [".modes.set", { mode: "modify", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `a-c` (kakoune: move)

edit.indent:
  title:
    en: Indent selected lines

  keys:
    qwerty: |-
      `>` (core: move)

  doc:
    en: |
      Indent selected lines.

      | Keybindings         | Commands                                  |
      | -----------         | --------                                  |
      | `>` (helix: select) | `[".edit.indent"], [".modes.set.move"]` |

edit.indent.withEmpty:
  title:
    en: Indent selected lines (including empty lines)

  keys:
    qwerty: |-
      `a->` (kakoune: move)

  doc:
    en: |+
      Indent selected lines (including empty lines).

edit.insert:
  title:
    en: Insert contents of register

  keys:
    qwerty: |-
      `s-a-r` (kakoune: move)
      `s-r` (helix: move)

  doc:
    en: |
      Insert contents of register.

      A `where` argument may be specified to state where the text should be
      inserted relative to each selection. If unspecified, each selection will be
      replaced by the text.

      Specify `"shift": "select"` to select the inserted selection,
      `"shift": "extend"` to extend to the inserted text, and nothing to keep the
      current selections.

      Specify `all` to paste all contents next to each selection.


      #### Additional commands

      | Title                              | Identifier               | Keybinding                                       | Commands                                                                                                                       |
      | ---------------------------------- | ------------------------ | ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ |
      | Pick register and replace          | `selectRegister-insert`  | `c-r` (kakoune: move), `c-r` (kakoune: modify) | `[".selectRegister", { +register }], [".edit.insert", { ... }]`                                                                |
      | Paste before                       | `paste.before`           |                                                  | `[".edit.insert", { handleNewLine: true, where: "start", ... }]`                                                               |
      | Paste after                        | `paste.after`            |                                                  | `[".edit.insert", { handleNewLine: true, where: "end"  , ... }]`                                                               |
      | Paste before and select            | `paste.before.select`    | `s-p` (core: move)                             | `[".edit.insert", { handleNewLine: true, where: "start", shift: "select", ... }]`                                              |
      | Paste after and select             | `paste.after.select`     | `p` (core: move)                               | `[".edit.insert", { handleNewLine: true, where: "end"  , shift: "select", ... }]`                                              |
      | Paste all before                   | `pasteAll.before`        |                                                  | `[".edit.insert", { handleNewLine: true, where: "start", all: true, ... }]`                                                    |
      | Paste all after                    | `pasteAll.after`         |                                                  | `[".edit.insert", { handleNewLine: true, where: "end"  , all: true, ... }]`                                                    |
      | Paste all before and select        | `pasteAll.before.select` | `s-a-p` (kakoune: move)                        | `[".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", ... }]`                                   |
      | Paste all after and select         | `pasteAll.after.select`  | `a-p` (kakoune: move)                          | `[".edit.insert", { handleNewLine: true, where: "end"  , all: true, shift: "select", ... }]`                                   |
      | Delete                             | `delete`                 | `a-d` (core: move)                             | `[".edit.insert", { register: "_", ... }]`                                                                                     |
      | Delete and switch to Modify        | `delete-modify`          | `a-c` (kakoune: move)                          | `[".modes.set", { mode: "modify", +mode }], [".edit.insert", { register: "_", ... }]`                                          |
      | Copy and delete                    | `yank-delete`            | `d` (core: move)                               | `[".selections.saveText", { +register }],                                            [".edit.insert", { register: "_", ... }]` |
      | Copy, delete and switch to Modify  | `yank-delete-modify`     | `c` (core: move; helix: select)                | `[".selections.saveText", { +register }], [".modes.set.modify"], [".edit.insert", { register: "_", ... }]` |
      | Copy and replace                   | `yank-replace`           | `s-r` (kakoune: move)                          | `[".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", ... }]`               |
      |                                    |                          | `s-r` (helix: select)                            | `[".edit.insert"], [".modes.set.move"]`                                                                                        |
      |                                    |                          | `a-d` (helix: select)                            | `[".edit.delete"], [".modes.set.move"]`                                                                                        |
      |                                    |                          | `d` (helix: select)                              | `[".edit.yank-delete"], [".modes.set.move"]`                                                                                  |
      |                                    |                          | `s-p` (helix: select)                            | `[".edit.paste.before"], [".modes.set.move"]`                                                                                 |
      |                                    |                          | `p` (helix: select)                              | `[".edit.paste.after"], [".modes.set.move"]`                                                                                  |
      | Replace                            | `replace`                |                                                  | `[".edit.insert"]`                                                                                                          |

edit.join:
  title:
    en: Join lines

  keys:
    qwerty: |-
      `a-j` (kakoune: move)
      `s-j` (helix: move; helix: select)

  doc:
    en: |+
      Join lines.

edit.join.select:
  title:
    en: Join lines and select inserted separators

  keys:
    qwerty: |-
      `s-a-j` (core: move; helix: select)

  doc:
    en: |+
      Join lines and select inserted separators.

edit.newLine.above:
  title:
    en: Insert new line above each selection

  keys:
    qwerty: |-
      `s-a-o` (kakoune: move)

  doc:
    en: |
      Insert new line above each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.


      #### Additional keybindings

      | Title                                      | Identifier             | Keybinding                          | Commands                                                                          |
      | ------------------------------------------ | ---------------------- | ------------------------------------| --------------------------------------------------------------------------------- |
      | Insert new line above and switch to modify | `newLine.above.modify` | `s-o` (core: move; helix: select) | `[".edit.newLine.above", { shift: "select" }], [".modes.modify.before", { ... }]` |

edit.newLine.above.modify:
  title:
    en: Insert new line above and switch to modify

  commands: |-
    [".edit.newLine.above", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `s-o` (core: move; helix: select)

edit.newLine.below:
  title:
    en: Insert new line below each selection

  keys:
    qwerty: |-
      `a-o` (kakoune: move)

  doc:
    en: |
      Insert new line below each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.


      #### Additional keybindings

      | Title                                      | Identifier             | Keybinding                        | Commands                                                                          |
      | ------------------------------------------ | ---------------------- | --------------------------------- | --------------------------------------------------------------------------------- |
      | Insert new line below and switch to modify | `newLine.below.modify` | `o` (core: move; helix: select) | `[".edit.newLine.below", { shift: "select" }], [".modes.modify.before", { ... }]` |

edit.newLine.below.modify:
  title:
    en: Insert new line below and switch to modify

  commands: |-
    [".edit.newLine.below", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `o` (core: move; helix: select)

edit.paste.after:
  title:
    en: Paste after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , $exclude: [] }]

edit.paste.after.select:
  title:
    en: Paste after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `p` (core: move)

edit.paste.before:
  title:
    en: Paste before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", $exclude: [] }]

edit.paste.before.select:
  title:
    en: Paste before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `s-p` (core: move)

edit.pasteAll.after:
  title:
    en: Paste all after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, $exclude: [] }]

edit.pasteAll.after.select:
  title:
    en: Paste all after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `a-p` (kakoune: move)

edit.pasteAll.before:
  title:
    en: Paste all before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, $exclude: [] }]

edit.pasteAll.before.select:
  title:
    en: Paste all before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-p` (kakoune: move)

edit.replace:
  title:
    en: Replace

  commands: |-
    [".edit.insert"]

edit.replaceCharacters:
  title:
    en: Replace characters

  keys:
    qwerty: |-
      `r` (core: move)

  doc:
    en: |
      Replace characters.

      | Keybindings         | Commands                                             |
      | -----------         | --------                                             |
      | `r` (helix: select) | `[".edit.replaceCharacters"], [".modes.set.move"]` |

edit.selectRegister-insert:
  title:
    en: Pick register and replace

  commands: |-
    [".selectRegister", { $include: ["register"] }], [".edit.insert", { $exclude: ["register"] }]

  keys:
    qwerty: |-
      `c-r` (kakoune: move)
      `c-r` (kakoune: modify)

edit.yank-delete:
  title:
    en: "Copy and delete"

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".edit.insert", { register: "_", $exclude: ["register"] }]

  keys:
    qwerty: |-
      `d` (core: move)

edit.yank-delete-modify:
  title:
    en: Copy, delete and switch to Modify

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".modes.set.modify"], [".edit.insert", { register: "_", $exclude: ["register"] }]

  keys:
    qwerty: |-
      `c` (core: move; helix: select)

edit.yank-replace:
  title:
    en: Copy and replace

  commands: |-
    [".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", $exclude: [] }]

  keys:
    qwerty: |-
      `s-r` (kakoune: move)

history.recording.play:
  title:
    en: Replay recording

  keys:
    qwerty: |-
      `q` (kakoune: move)

  doc:
    en: |+
      Replay recording.

history.recording.start:
  title:
    en: Start recording

  keys:
    qwerty: |-
      `s-q` (kakoune: move, !recording)

  doc:
    en: |+
      Start recording.

history.recording.stop:
  title:
    en: Stop recording

  keys:
    qwerty: |-
      `escape` (kakoune: move, recording)
      `s-q` (kakoune: move, recording)

  doc:
    en: |+
      Stop recording.

history.redo:
  title:
    en: Redo

  keys:
    qwerty: |-
      `s-u` (core: move; helix: select)

  doc:
    en: |+
      Redo.

history.redo.selections:
  title:
    en: Redo a change of selections

  keys:
    qwerty: |-
      `s-a-u` (kakoune: move)

  doc:
    en: |+
      Redo a change of selections.

history.repeat:
  title:
    en: Repeat last change

  doc:
    en: |
      Repeat last change.


      | Title                        | Identifier         | Keybinding                          | Commands                                                                      |
      | ---------------------------- | ------------------ | ------------------------------------| ----------------------------------------------------------------------------- |
      | Repeat last selection change | `repeat.selection` |                                     | `[".history.repeat", { filter: "danceflow\\.(seek|select|selections)", +count }]` |
      | Repeat last seek             | `repeat.seek`      | `a-.` (core: move; helix: select) | `[".history.repeat", { filter: "danceflow\\.seek", +count }]`                     |

history.repeat.edit:
  title:
    en: Repeat last edit without a command

  keys:
    qwerty: |-
      `.` (core: move)
      `NumPad_Decimal` (core: move)

  doc:
    en: |+
      Repeat last edit without a command.

history.repeat.seek:
  title:
    en: Repeat last seek

  commands: |-
    [".history.repeat", { filter: "danceflow\\.seek", $include: ["count"] }]

  keys:
    qwerty: |-
      `a-.` (core: move; helix: select)

history.repeat.selection:
  title:
    en: Repeat last selection change

  commands: |-
    [".history.repeat", { filter: "danceflow\\.(seek|select|selections)", $include: ["count"] }]

history.undo:
  title:
    en: Undo

  keys:
    qwerty: |-
      `u` (core: move; helix: select)

  doc:
    en: |+
      Undo.

history.undo.selections:
  title:
    en: Undo a change of selections

  keys:
    qwerty: |-
      `a-u` (kakoune: move)

  doc:
    en: |+
      Undo a change of selections.

ifEmpty:
  title:
    en: |-
      Executes one of the specified commands depending on whether the current
      selections are empty

  doc:
    en: |
      Executes one of the specified commands depending on whether the current
      selections are empty.

ignore:
  title:
    en: Ignore key

  doc:
    en: |
      Ignore key.

inspect.renameToClipboard:
  title:
    en: Renames the inspected symbol to the content of the clipboard

  doc:
    en: |
      Renames the inspected symbol to the content of the clipboard.

jumppoint.create:
  title:
    en: Add current position to jump list

  doc:
    en: |
      Add current position to jump list.

modes.modify.after:
  title:
    en: Modify after

  commands: |-
    [".selections.faceForward" , { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `a` (core: move; helix: select)

modes.modify.before:
  title:
    en: Modify before

  commands: |-
    [".selections.faceBackward", { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `i` (core: move; helix: select)

modes.modify.lineEnd:
  title:
    en: Modify at line end

  commands: |-
    [".select.lineEnd" , { shift: "jump" }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `s-a` (core: move; helix: select)

modes.modify.lineStart:
  title:
    en: Modify at line start

  commands: |-
    [".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `s-i` (core: move; helix: select)

modes.set:
  title:
    en: Set Danceflow mode

  doc:
    en: |+
      Set Danceflow mode.

      #### Variants

      | Title              | Identifier   | Keybinding                                                  | Command                                                     |
      | ------------------ | ------------ | ----------------------------------------------------------- | ----------------------------------------------------------- |
      | Set mode to Move | `set.move` | `escape` (core: modify; helix: select), `v` (helix: select) | `[".modes.set", { mode: "move" }], ["hideSuggestWidget"]` |
      | Set mode to Modify | `set.modify` |                                                             | `[".modes.set", { mode: "modify" }]`                        |
      | Set mode to Select | `set.select` | `v` (helix: move)                                         | `[".modes.set", { mode: "select" }]`                        |
      | Set mode to Inspect | `set.inspect` |                                                           | `[".modes.set", { mode: "inspect" }]`                        |

      Other variants are provided to switch to modify mode:

      | Title                | Identifier         | Keybinding                          | Commands                                                                                                                                                                            |
      | -------------------- | ------------------ | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
      | Modify before        | `modify.before`    | `i` (core: move; helix: select)   | `[".selections.faceBackward", { record: false }],           [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "start", record: false, empty: true, ... }]` |
      | Modify after         | `modify.after`     | `a` (core: move; helix: select)   | `[".selections.faceForward" , { record: false }],           [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "end"  , record: false, empty: true, ... }]` |
      | Modify at line start | `modify.lineStart` | `s-i` (core: move; helix: select) | `[".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "start", record: false, empty: true, ... }]` |
      | Modify at line end   | `modify.lineEnd`   | `s-a` (core: move; helix: select) | `[".select.lineEnd"  , { shift: "jump"                  }], [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "end"  , record: false, empty: true, ... }]` |

modes.set.inspect:
  title:
    en: Set mode to Inspect

  commands: |-
    [".modes.set", { mode: "inspect" }]

modes.set.modify:
  title:
    en: Set mode to Modify

  commands: |-
    [".modes.set", { mode: "modify" }]

modes.set.move:
  title:
    en: Set mode to Move

  commands: |-
    [".modes.set", { mode: "move" }], ["hideSuggestWidget"]

  keys:
    qwerty: |-
      `escape` (core: modify; helix: select)
      `v` (helix: select)

modes.set.select:
  title:
    en: Set mode to Select

  commands: |-
    [".modes.set", { mode: "select" }]

  keys:
    qwerty: |-
      `v` (helix: move)

modes.set.temporarily:
  title:
    en: Set Danceflow mode temporarily

  doc:
    en: |+
      Set Danceflow mode temporarily.

      #### Variants

      | Title                 | Identifier               | Keybindings             | Commands                                         |
      | --------------------- | ------------------------ | ----------------------- | ------------------------------------------------ |
      | Temporary Move mode | `set.temporarily.move` | `c-v` (kakoune: modify) | `[".modes.set.temporarily", { mode: "move" }]` |
      | Temporary Modify mode | `set.temporarily.modify` | `c-v` (kakoune: move) | `[".modes.set.temporarily", { mode: "modify" }]` |

modes.set.temporarily.modify:
  title:
    en: Temporary Modify mode

  commands: |-
    [".modes.set.temporarily", { mode: "modify" }]

  keys:
    qwerty: |-
      `c-v` (kakoune: move)

modes.set.temporarily.move:
  title:
    en: Temporary Move mode

  commands: |-
    [".modes.set.temporarily", { mode: "move" }]

  keys:
    qwerty: |-
      `c-v` (kakoune: modify)

openMenu:
  title:
    en: Open menu

  doc:
    en: |+
      Open menu.

      If no menu is specified, a prompt will ask for the name of the menu to open.

      Alternatively, a `menu` can be inlined in the arguments.

      Pass a `prefix` argument to insert the prefix string followed by the typed
      key if it does not match any menu entry. This can be used to implement chords
      like `jj`.

run:
  title:
    en: Run code

  doc:
    en: |
      Run code.

      There are two ways to invoke this command. The first one is to provide an
      `code` string argument. This code must be a valid JavaScript string, and will
      be executed with full access to the [Danceflow API](../api/README.md). For
      instance,

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "code": "Selections.set(Selections.filter(text => text.includes('foo')))",
        },
      },
      ```

      If no argument is provided, a prompt will be shown asking for an input.
      Furthermore, an array of strings can be passed to make longer functions
      easier to read:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "code": [
            "for (const selection of Selections.current) {",
            "  console.log(text(selection));",
            "}",
          ],
        },
      },
      ```

      The second way to use this command is with the `commands` argument. This
      argument must be an array of "command-like" values. The simplest
      "command-like" value is a string corresponding to the command itself:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            "danceflow.modes.set.move",
          ],
        },
      },
      ```

      But arguments can also be provided by passing an array:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            ["danceflow.modes.set", { "mode": "move" }],
          ],
        },
      },
      ```

      Or by passing an object, like regular VS Code key bindings:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            {
              "command": "danceflow.modes.set",
              "args": { "mode": "move" },
            },
          ],
        },
      },
      ```

      These values can be mixed:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            ["danceflow.selections.saveText", { "register": "^" }],
            {
              "command": "danceflow.modes.set",
              "args": { "mode": "move" },
            },
            "hideSuggestWidget",
          ],
        },
      },
      ```

      If both `code` and `commands` are given, Danceflow will use `code` if arbitrary
      code execution is enabled, or `commands` otherwise.

search:
  title:
    en: Search

  keys:
    qwerty: |-
      `/` (core: move)
      `NumPad_Divide` (core: move)

  doc:
    en: |
      Search.


      | Title                    | Identifier        | Keybinding                                   | Command                                                |
      | ------------------------ | ----------------- | -------------------------------------------- | ------------------------------------------------------ |
      | Search (extend)          | `extend`          | `?` (kakoune: move), `/` (helix: select)   | `[".search", {                shift: "extend", ... }]` |
      | Search backward          | `backward`        | `a-/` (kakoune: move), `?` (helix: move) | `[".search", { direction: -1                 , ... }]` |
      | Search backward (extend) | `backward.extend` | `a-?` (kakoune: move), `?` (helix: select) | `[".search", { direction: -1, shift: "extend", ... }]` |

search.backward:
  title:
    en: Search backward

  commands: |-
    [".search", { direction: -1 , $exclude: [] }]

  keys:
    qwerty: |-
      `a-/` (kakoune: move)
      `?` (helix: move)

search.backward.extend:
  title:
    en: Search backward (extend)

  commands: |-
    [".search", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `a-?` (kakoune: move)
      `?` (helix: select)

search.extend:
  title:
    en: Search (extend)

  commands: |-
    [".search", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `?` (kakoune: move)
      `/` (helix: select)

search.next:
  title:
    en: Select next match

  keys:
    qwerty: |-
      `n` (core: move)

  doc:
    en: |
      Select next match.


      | Title                 | Identifier     | Keybinding                                       | Command                                               |
      | --------------------- | -------------- | ------------------------------------------------ | ----------------------------------------------------- |
      | Add next match        | `next.add`     | `s-n` (kakoune: move), `n` (helix: select)     | `[".search.next", {                add: true, ... }]` |
      | Select previous match | `previous`     | `a-n` (kakoune: move), `s-n` (helix: move)   | `[".search.next", { direction: -1           , ... }]` |
      | Add previous match    | `previous.add` | `s-a-n` (kakoune: move), `s-n` (helix: select) | `[".search.next", { direction: -1, add: true, ... }]` |

search.next.add:
  title:
    en: Add next match

  commands: |-
    [".search.next", { add: true, $exclude: [] }]

  keys:
    qwerty: |-
      `s-n` (kakoune: move)
      `n` (helix: select)

search.previous:
  title:
    en: Select previous match

  commands: |-
    [".search.next", { direction: -1 , $exclude: [] }]

  keys:
    qwerty: |-
      `a-n` (kakoune: move)
      `s-n` (helix: move)

search.previous.add:
  title:
    en: Add previous match

  commands: |-
    [".search.next", { direction: -1, add: true, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-n` (kakoune: move)
      `s-n` (helix: select)

search.selection:
  title:
    en: Search current selection

  keys:
    qwerty: |-
      `a-*` (core: move)
      `a-NumPad_Multiply` (core: move)

  doc:
    en: |
      Search current selection.


      | Title                            | Identifier        | Keybinding                                           | Command                                             |
      | -------------------------------- | ----------------- | ---------------------------------------------------- | --------------------------------------------------- |
      | Search current selection (smart) | `selection.smart` | `*` (core: move), `NumPad_Multiply` (core: move) | `[".search.selection", { smart: true, +register }]` |

search.selection.smart:
  title:
    en: Search current selection (smart)

  commands: |-
    [".search.selection", { smart: true, $include: ["register"] }]

  keys:
    qwerty: |-
      `*` (core: move)
      `NumPad_Multiply` (core: move)

seek:
  title:
    en: Select to character (excluded)

  keys:
    qwerty: |-
      `t` (core: move)

  doc:
    en: |
      Select to character (excluded).


      #### Variants

      | Title                                    | Identifier                 | Keybinding                                       | Command                                                             |
      | ---------------------------------------- | -------------------------- | ------------------------------------------------ | ------------------------------------------------------------------- |
      | Extend to character (excluded)           | `extend`                   | `s-t` (kakoune: move), `t` (helix: select)     | `[".seek", {                shift: "extend"               , ... }]` |
      | Select to character (excluded, backward) | `backward`                 | `a-t` (kakoune: move), `s-t` (helix: move)   | `[".seek", {                                 direction: -1, ... }]` |
      | Extend to character (excluded, backward) | `extend.backward`          | `s-a-t` (kakoune: move), `s-t` (helix: select) | `[".seek", {                shift: "extend", direction: -1, ... }]` |
      | Select to character (included)           | `included`                 | `f` (core: move)                               | `[".seek", { include: true                                , ... }]` |
      | Extend to character (included)           | `included.extend`          | `s-f` (kakoune: move), `f` (helix: select)     | `[".seek", { include: true, shift: "extend"               , ... }]` |
      | Select to character (included, backward) | `included.backward`        | `a-f` (kakoune: move), `s-f` (helix: move)   | `[".seek", { include: true,                  direction: -1, ... }]` |
      | Extend to character (included, backward) | `included.extend.backward` | `s-a-f` (kakoune: move), `s-f` (helix: select) | `[".seek", { include: true, shift: "extend", direction: -1, ... }]` |

seek.askObject:
  title:
    en: Select whole object

  commands: |-
    [".openMenu", { menu: "object", title: "Select whole object..." }]

  keys:
    qwerty: |-
      `a-a` (kakoune: move)
      `a-a` (kakoune: modify)

seek.askObject.end:
  title:
    en: Select to whole object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "end" }] }]

  keys:
    qwerty: |-
      `]` (kakoune: move)

seek.askObject.end.extend:
  title:
    en: Extend to whole object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "end" , shift: "extend" }] }]

  keys:
    qwerty: |-
      `}` (kakoune: move)

seek.askObject.inner:
  title:
    en: Select inner object

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true }], title: "Select inner object..." }]

  keys:
    qwerty: |-
      `a-i` (kakoune: move)
      `a-i` (kakoune: modify)

seek.askObject.inner.end:
  title:
    en: Select to inner object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "end" }] }]

  keys:
    qwerty: |-
      `a-]` (kakoune: move)

seek.askObject.inner.end.extend:
  title:
    en: Extend to inner object end

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "end" , shift: "extend" }] }]

  keys:
    qwerty: |-
      `a-}` (kakoune: move)

seek.askObject.inner.start:
  title:
    en: Select to inner object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "start" }] }]

  keys:
    qwerty: |-
      `a-[` (kakoune: move)

seek.askObject.inner.start.extend:
  title:
    en: Extend to inner object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ inner: true, where: "start", shift: "extend" }] }]

  keys:
    qwerty: |-
      `a-{` (kakoune: move)

seek.askObject.start:
  title:
    en: Select to whole object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "start" }] }]

  keys:
    qwerty: |-
      `[` (kakoune: move)

seek.askObject.start.extend:
  title:
    en: Extend to whole object start

  commands: |-
    [".openMenu", { menu: "object", pass: [{ where: "start", shift: "extend" }] }]

  keys:
    qwerty: |-
      `{` (kakoune: move)

seek.backward:
  title:
    en: Select to character (excluded, backward)

  commands: |-
    [".seek", { direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `a-t` (kakoune: move)
      `s-t` (helix: move)

seek.enclosing:
  title:
    en: Select to next enclosing character

  keys:
    qwerty: |-
      `m` (kakoune: move)

  doc:
    en: |
      Select to next enclosing character.


      #### Variants

      | Title                                  | Identifier                  | Keybinding                | Command                                                        |
      | -------------------------------------- | --------------------------- | ------------------------- | -------------------------------------------------------------- |
      | Extend to next enclosing character     | `enclosing.extend`          | `s-m` (kakoune: move)   | `[".seek.enclosing", { shift: "extend"               , ... }]` |
      | Select to previous enclosing character | `enclosing.backward`        | `a-m` (kakoune: move)   | `[".seek.enclosing", {                  direction: -1, ... }]` |
      | Extend to previous enclosing character | `enclosing.extend.backward` | `s-a-m` (kakoune: move) | `[".seek.enclosing", { shift: "extend", direction: -1, ... }]` |

seek.enclosing.backward:
  title:
    en: Select to previous enclosing character

  commands: |-
    [".seek.enclosing", { direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `a-m` (kakoune: move)

seek.enclosing.extend:
  title:
    en: Extend to next enclosing character

  commands: |-
    [".seek.enclosing", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-m` (kakoune: move)

seek.enclosing.extend.backward:
  title:
    en: Extend to previous enclosing character

  commands: |-
    [".seek.enclosing", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-m` (kakoune: move)

seek.extend:
  title:
    en: Extend to character (excluded)

  commands: |-
    [".seek", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-t` (kakoune: move)
      `t` (helix: select)

seek.extend.backward:
  title:
    en: Extend to character (excluded, backward)

  commands: |-
    [".seek", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-t` (kakoune: move)
      `s-t` (helix: select)

seek.included:
  title:
    en: Select to character (included)

  commands: |-
    [".seek", { include: true , $exclude: [] }]

  keys:
    qwerty: |-
      `f` (core: move)

seek.included.backward:
  title:
    en: Select to character (included, backward)

  commands: |-
    [".seek", { include: true, direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `a-f` (kakoune: move)
      `s-f` (helix: move)

seek.included.extend:
  title:
    en: Extend to character (included)

  commands: |-
    [".seek", { include: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-f` (kakoune: move)
      `f` (helix: select)

seek.included.extend.backward:
  title:
    en: Extend to character (included, backward)

  commands: |-
    [".seek", { include: true, shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-f` (kakoune: move)
      `s-f` (helix: select)

seek.leap:
  title:
    en: Leap forward

  doc:
    en: |
      Leap forward.

      Inspired by [`leap.nvim`](https://github.com/ggandor/leap.nvim).

      #### Variants

      | Title         | Identifier      | Command                                  |
      | ------------- | --------------- | ---------------------------------------- |
      | Leap backward | `leap.backward` | `[".seek.leap", { direction: -1, ... }]` |

seek.leap.backward:
  title:
    en: Leap backward

  commands: |-
    [".seek.leap", { direction: -1, $exclude: [] }]

seek.object:
  title:
    en: Select object

  doc:
    en: |
      Select object.


      #### Object patterns

      - Pairs: `<regexp>(?#inner)<regexp>`.

      - Character sets: `[<characters>]+`.

        - Can be preceded by `(?<before>[<characters>]+)` and followed by
          `(?<after>[<character>]+)` for whole objects.

      - Matches that may only span a single line: `(?#singleline)<regexp>`.

      - Predefined: `(?#predefined=<argument | paragraph | sentence>)`.

      #### Variants

      | Title                        | Identifier                     | Keybinding                                       | Command                                                                                       |
      | ---------------------------- | ------------------------------ | ------------------------------------------------ | --------------------------------------------------------------------------------------------- |
      | Select whole object          | `askObject`                    | `a-a` (kakoune: move), `a-a` (kakoune: modify) | `[".openMenu", { menu: "object",                          title: "Select whole object..." }]` |
      | Select inner object          | `askObject.inner`              | `a-i` (kakoune: move), `a-i` (kakoune: modify) | `[".openMenu", { menu: "object", pass: [{ inner: true }], title: "Select inner object..." }]` |
      | Select to whole object start | `askObject.start`              | `[` (kakoune: move)                            | `[".openMenu", { menu: "object", pass: [{              where: "start"                  }] }]` |
      | Extend to whole object start | `askObject.start.extend`       | `{` (kakoune: move)                            | `[".openMenu", { menu: "object", pass: [{              where: "start", shift: "extend" }] }]` |
      | Select to inner object start | `askObject.inner.start`        | `a-[` (kakoune: move)                          | `[".openMenu", { menu: "object", pass: [{ inner: true, where: "start"                  }] }]` |
      | Extend to inner object start | `askObject.inner.start.extend` | `a-{` (kakoune: move)                          | `[".openMenu", { menu: "object", pass: [{ inner: true, where: "start", shift: "extend" }] }]` |
      | Select to whole object end   | `askObject.end`                | `]` (kakoune: move)                            | `[".openMenu", { menu: "object", pass: [{              where: "end"                    }] }]` |
      | Extend to whole object end   | `askObject.end.extend`         | `}` (kakoune: move)                            | `[".openMenu", { menu: "object", pass: [{              where: "end"  , shift: "extend" }] }]` |
      | Select to inner object end   | `askObject.inner.end`          | `a-]` (kakoune: move)                          | `[".openMenu", { menu: "object", pass: [{ inner: true, where: "end"                    }] }]` |
      | Extend to inner object end   | `askObject.inner.end.extend`   | `a-}` (kakoune: move)                          | `[".openMenu", { menu: "object", pass: [{ inner: true, where: "end"  , shift: "extend" }] }]` |

seek.syntax.child.experimental:
  title:
    en: Select child syntax object

  commands: |-
    [".seek.syntax.experimental", { where: "child" }]

seek.syntax.experimental:
  title:
    en: Select syntax object

  doc:
    en: |
      Select syntax object.

      #### Variants

      | Title                         | Identifier                     | Command                                                |
      | ----------------------------- | ------------------------------ | ------------------------------------------------------ |
      | Select next syntax object     | `syntax.next.experimental`     | `[".seek.syntax.experimental", { where: "next"     }]` |
      | Select previous syntax object | `syntax.previous.experimental` | `[".seek.syntax.experimental", { where: "previous" }]` |
      | Select parent syntax object   | `syntax.parent.experimental`   | `[".seek.syntax.experimental", { where: "parent"   }]` |
      | Select child syntax object    | `syntax.child.experimental`    | `[".seek.syntax.experimental", { where: "child"    }]` |

seek.syntax.next.experimental:
  title:
    en: Select next syntax object

  commands: |-
    [".seek.syntax.experimental", { where: "next" }]

seek.syntax.parent.experimental:
  title:
    en: Select parent syntax object

  commands: |-
    [".seek.syntax.experimental", { where: "parent" }]

seek.syntax.previous.experimental:
  title:
    en: Select previous syntax object

  commands: |-
    [".seek.syntax.experimental", { where: "previous" }]

seek.word:
  title:
    en: Select to next word start

  keys:
    qwerty: |-
      `w` (core: move)

  doc:
    en: |
      Select to next word start.

      Select the word and following whitespaces on the right of the end of each selection.


      #### Variants

      | Title                                        | Identifier                | Keybinding                                       | Command                                                                               |
      | -------------------------------------------- | ------------------------- | ------------------------------------------------ | ------------------------------------------------------------------------------------- |
      | Extend to next word start                    | `word.extend`             | `s-w` (kakoune: move), `w` (helix: select)     | `[".seek.word", {                             shift: "extend"               , ... }]` |
      | Select to previous word start                | `word.backward`           | `b` (core: move)                               | `[".seek.word", {                                              direction: -1, ... }]` |
      | Extend to previous word start                | `word.extend.backward`    | `s-b` (kakoune: move), `b` (helix: select)     | `[".seek.word", {                             shift: "extend", direction: -1, ... }]` |
      | Select to next non-whitespace word start     | `word.ws`                 | `a-w` (kakoune: move), `s-w` (helix: move)   | `[".seek.word", {                   ws: true                                , ... }]` |
      | Extend to next non-whitespace word start     | `word.ws.extend`          | `s-a-w` (kakoune: move), `s-w` (helix: select) | `[".seek.word", {                   ws: true, shift: "extend"               , ... }]` |
      | Select to previous non-whitespace word start | `word.ws.backward`        | `a-b` (kakoune: move), `s-b` (helix: move)   | `[".seek.word", {                   ws: true,                  direction: -1, ... }]` |
      | Extend to previous non-whitespace word start | `word.ws.extend.backward` | `s-a-b` (kakoune: move), `s-b` (helix: select) | `[".seek.word", {                   ws: true, shift: "extend", direction: -1, ... }]` |
      | Select to next word end                      | `wordEnd`                 | `e` (core: move)                               | `[".seek.word", { stopAtEnd: true                                           , ... }]` |
      | Extend to next word end                      | `wordEnd.extend`          | `s-e` (kakoune: move), `e` (helix: select)     | `[".seek.word", { stopAtEnd: true ,           shift: "extend"               , ... }]` |
      | Select to next non-whitespace word end       | `wordEnd.ws`              | `a-e` (kakoune: move), `s-e` (helix: move)   | `[".seek.word", { stopAtEnd: true , ws: true                                , ... }]` |
      | Extend to next non-whitespace word end       | `wordEnd.ws.extend`       | `s-a-e` (kakoune: move), `s-e` (helix: select) | `[".seek.word", { stopAtEnd: true , ws: true, shift: "extend"               , ... }]` |

seek.word.backward:
  title:
    en: Select to previous word start

  commands: |-
    [".seek.word", { direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `b` (core: move)

seek.word.extend:
  title:
    en: Extend to next word start

  commands: |-
    [".seek.word", { shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-w` (kakoune: move)
      `w` (helix: select)

seek.word.extend.backward:
  title:
    en: Extend to previous word start

  commands: |-
    [".seek.word", { shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-b` (kakoune: move)
      `b` (helix: select)

seek.word.ws:
  title:
    en: Select to next non-whitespace word start

  commands: |-
    [".seek.word", { ws: true , $exclude: [] }]

  keys:
    qwerty: |-
      `a-w` (kakoune: move)
      `s-w` (helix: move)

seek.word.ws.backward:
  title:
    en: Select to previous non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `a-b` (kakoune: move)
      `s-b` (helix: move)

seek.word.ws.extend:
  title:
    en: Extend to next non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-w` (kakoune: move)
      `s-w` (helix: select)

seek.word.ws.extend.backward:
  title:
    en: Extend to previous non-whitespace word start

  commands: |-
    [".seek.word", { ws: true, shift: "extend", direction: -1, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-b` (kakoune: move)
      `s-b` (helix: select)

seek.wordEnd:
  title:
    en: Select to next word end

  commands: |-
    [".seek.word", { stopAtEnd: true , $exclude: [] }]

  keys:
    qwerty: |-
      `e` (core: move)

seek.wordEnd.extend:
  title:
    en: Extend to next word end

  commands: |-
    [".seek.word", { stopAtEnd: true , shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-e` (kakoune: move)
      `e` (helix: select)

seek.wordEnd.ws:
  title:
    en: Select to next non-whitespace word end

  commands: |-
    [".seek.word", { stopAtEnd: true , ws: true , $exclude: [] }]

  keys:
    qwerty: |-
      `a-e` (kakoune: move)
      `s-e` (helix: move)

seek.wordEnd.ws.extend:
  title:
    en: Extend to next non-whitespace word end

  commands: |-
    [".seek.word", { stopAtEnd: true , ws: true, shift: "extend" , $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-e` (kakoune: move)
      `s-e` (helix: select)

select.buffer:
  title:
    en: Select whole buffer

  keys:
    qwerty: |-
      `%` (core: move; helix: select)

  doc:
    en: |+
      Select whole buffer.

select.documentEnd.extend:
  title:
    en: Extend to last character

  commands: |-
    [".select.lineEnd", { count: 2147483647, shift: "extend", $exclude: [] }]

select.documentEnd.jump:
  title:
    en: Jump to last character

  commands: |-
    [".select.lineEnd", { count: 2147483647, shift: "jump" , $exclude: [] }]

select.down.extend:
  title:
    en: Extend down

  commands: |-
    [".select.vertically", { direction: 1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-j` (kakoune: move)
      `s-down` (kakoune: move)
      `j` (helix: select)
      `down` (helix: select)

select.down.jump:
  title:
    en: Jump down

  commands: |-
    [".select.vertically", { direction: 1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `j` (core: move)  , `down` (core: move)

select.firstLine.extend:
  title:
    en: Extend to first line

  commands: |-
    [".select.lineStart", { count: 0, shift: "extend", $exclude: [] }]

select.firstLine.jump:
  title:
    en: Jump to first line

  commands: |-
    [".select.lineStart", { count: 0, shift: "jump" , $exclude: [] }]

select.firstVisibleLine:
  title:
    en: Select to first visible line

  doc:
    en: |
      Select to first visible line.

      #### Variants

      | Title                        | Identifier                | Command                                             |
      | ---------------------------- | ------------------------- | --------------------------------------------------- |
      | Jump to first visible line   | `firstVisibleLine.jump`   | `[".select.firstVisibleLine", { shift: "jump"   }]` |
      | Extend to first visible line | `firstVisibleLine.extend` | `[".select.firstVisibleLine", { shift: "extend" }]` |

select.firstVisibleLine.extend:
  title:
    en: Extend to first visible line

  commands: |-
    [".select.firstVisibleLine", { shift: "extend" }]

select.firstVisibleLine.jump:
  title:
    en: Jump to first visible line

  commands: |-
    [".select.firstVisibleLine", { shift: "jump" }]

select.halfPageDown.extend:
  title:
    en: Half page down

  commands: |-
    [".select.vertically", { direction: 1, by: "halfPage", shift: "extend" }]

  keys:
    qwerty: |-
      `c-d` (helix: select)

select.halfPageDown.jump:
  title:
    en: Half page down

  commands: |-
    [".select.vertically", { direction: 1, by: "halfPage", shift: "jump" }]

  keys:
    qwerty: |-
      `c-d` (core: move; core: modify)

select.halfPageUp.extend:
  title:
    en: Half page up

  commands: |-
    [".select.vertically", { direction: -1, by: "halfPage", shift: "extend" }]

  keys:
    qwerty: |-
      `c-u` (helix: select)

select.halfPageUp.jump:
  title:
    en: Half page up

  commands: |-
    [".select.vertically", { direction: -1, by: "halfPage", shift: "jump" }]

  keys:
    qwerty: |-
      `c-u` (core: move; core: modify)

select.horizontally:
  title:
    en: Select horizontally

  doc:
    en: |
      Select horizontally.


      #### Variants

      | Title        | Identifier     | Keybinding                                                                                         | Command                                                             |
      | ------------ | -------------- | -------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |
      | Jump right   | `right.jump`   | `l` (core: move)  , `right` (core: move)                                                       | `[".select.horizontally", { direction:  1, shift: "jump"  , ... }]` |
      | Extend right | `right.extend` | `s-l` (kakoune: move), `s-right` (kakoune: move), `l` (helix: select), `right` (helix: select) | `[".select.horizontally", { direction:  1, shift: "extend", ... }]` |
      | Jump left    | `left.jump`    | `h` (core: move)  , `left` (core: move)                                                        | `[".select.horizontally", { direction: -1, shift: "jump"  , ... }]` |
      | Extend left  | `left.extend`  | `s-h` (kakoune: move), `s-left` (kakoune: move), `h` (helix: select), `left` (helix: select)   | `[".select.horizontally", { direction: -1, shift: "extend", ... }]` |

select.lastLine:
  title:
    en: Select to last line

  doc:
    en: |
      Select to last line.

      #### Variants

      | Title               | Identifier        | Command                                     |
      | ------------------- | ----------------- | ------------------------------------------- |
      | Jump to last line   | `lastLine.jump`   | `[".select.lastLine", { shift: "jump"   }]` |
      | Extend to last line | `lastLine.extend` | `[".select.lastLine", { shift: "extend" }]` |

select.lastLine.extend:
  title:
    en: Extend to last line

  commands: |-
    [".select.lastLine", { shift: "extend" }]

select.lastLine.jump:
  title:
    en: Jump to last line

  commands: |-
    [".select.lastLine", { shift: "jump" }]

select.lastVisibleLine:
  title:
    en: Select to last visible line

  doc:
    en: |
      Select to last visible line.

      #### Variants

      | Title                       | Identifier               | Command                                            |
      | --------------------------- | ------------------------ | -------------------------------------------------- |
      | Jump to last visible line   | `lastVisibleLine.jump`   | `[".select.lastVisibleLine", { shift: "jump"   }]` |
      | Extend to last visible line | `lastVisibleLine.extend` | `[".select.lastVisibleLine", { shift: "extend" }]` |

select.lastVisibleLine.extend:
  title:
    en: Extend to last visible line

  commands: |-
    [".select.lastVisibleLine", { shift: "extend" }]

select.lastVisibleLine.jump:
  title:
    en: Jump to last visible line

  commands: |-
    [".select.lastVisibleLine", { shift: "jump" }]

select.left.extend:
  title:
    en: Extend left

  commands: |-
    [".select.horizontally", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-h` (kakoune: move)
      `s-left` (kakoune: move)
      `h` (helix: select)
      `left` (helix: select)

select.left.jump:
  title:
    en: Jump left

  commands: |-
    [".select.horizontally", { direction: -1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `h` (core: move)  , `left` (core: move)

select.line.above:
  title:
    en: Select line above

  doc:
    en: |
      Select line above.

select.line.above.extend:
  title:
    en: Extend to line above

  doc:
    en: |
      Extend to line above.

select.line.below:
  title:
    en: Select line below

  doc:
    en: |
      Select line below.

select.line.below.extend:
  title:
    en: Extend to line below

  keys:
    qwerty: |-
      `x` (helix: move; helix: select)

  doc:
    en: |+
      Extend to line below.

select.lineEnd:
  title:
    en: Select to line end

  keys:
    qwerty: |-
      `a-l` (kakoune: move)
      `end` (core: move)

  doc:
    en: |
      Select to line end.



      #### Variants

      | Title                    | Identifier           | Keybinding                                                                  | Command                                                         |
      | ------------------------ | -------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------- |
      | Extend to line end       | `lineEnd.extend`     | `s-a-l` (kakoune: move), `s-end` (kakoune: move), `end` (helix: select) | `[".select.lineEnd", {                 shift: "extend", ... }]` |
      | Jump to last character   | `documentEnd.jump`   |                                                                             | `[".select.lineEnd", { count: MAX_INT, shift: "jump"  , ... }]` |
      | Extend to last character | `documentEnd.extend` |                                                                             | `[".select.lineEnd", { count: MAX_INT, shift: "extend", ... }]` |

select.lineEnd.extend:
  title:
    en: Extend to line end

  commands: |-
    [".select.lineEnd", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-l` (kakoune: move)
      `s-end` (kakoune: move)
      `end` (helix: select)

select.lineStart:
  title:
    en: Select to line start

  keys:
    qwerty: |-
      `a-h` (kakoune: move)
      `home` (core: move)

  doc:
    en: |
      Select to line start.


      #### Variants

      | Title                             | Identifier                   | Keybinding                                                                    | Command                                                            |
      | --------------------              | ------------------           | ----------------------------------------------------------------------------- | ------------------------------------------------------------------ |
      | Jump to line start                | `lineStart.jump`             |                                                                               | `[".select.lineStart", {                  shift: "jump"  , ... }]` |
      | Extend to line start              | `lineStart.extend`           | `s-a-h` (kakoune: move), `s-home` (kakoune: move), `home` (helix: select) | `[".select.lineStart", {                  shift: "extend", ... }]` |
      | Jump to line start (skip blank)   | `lineStart.skipBlank.jump`   |                                                                               | `[".select.lineStart", { skipBlank: true, shift: "jump"  , ... }]` |
      | Extend to line start (skip blank) | `lineStart.skipBlank.extend` |                                                                               | `[".select.lineStart", { skipBlank: true, shift: "extend", ... }]` |
      | Jump to first line                | `firstLine.jump`             |                                                                               | `[".select.lineStart", { count: 0,        shift: "jump"  , ... }]` |
      | Extend to first line              | `firstLine.extend`           |                                                                               | `[".select.lineStart", { count: 0,        shift: "extend", ... }]` |

select.lineStart.extend:
  title:
    en: Extend to line start

  commands: |-
    [".select.lineStart", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-h` (kakoune: move)
      `s-home` (kakoune: move)
      `home` (helix: select)

select.lineStart.jump:
  title:
    en: Jump to line start

  commands: |-
    [".select.lineStart", { shift: "jump" , $exclude: [] }]

select.lineStart.skipBlank.extend:
  title:
    en: Extend to line start (skip blank)

  commands: |-
    [".select.lineStart", { skipBlank: true, shift: "extend", $exclude: [] }]

select.lineStart.skipBlank.jump:
  title:
    en: Jump to line start (skip blank)

  commands: |-
    [".select.lineStart", { skipBlank: true, shift: "jump" , $exclude: [] }]

select.middleVisibleLine:
  title:
    en: Select to middle visible line

  doc:
    en: |
      Select to middle visible line.

      #### Variants

      | Title                         | Identifier                 | Command                                              |
      | ----------------------------- | -------------------------- | ---------------------------------------------------- |
      | Jump to middle visible line   | `middleVisibleLine.jump`   | `[".select.middleVisibleLine", { shift: "jump"   }]` |
      | Extend to middle visible line | `middleVisibleLine.extend` | `[".select.middleVisibleLine", { shift: "extend" }]` |

select.middleVisibleLine.extend:
  title:
    en: Extend to middle visible line

  commands: |-
    [".select.middleVisibleLine", { shift: "extend" }]

select.middleVisibleLine.jump:
  title:
    en: Jump to middle visible line

  commands: |-
    [".select.middleVisibleLine", { shift: "jump" }]

select.pageDown.extend:
  title:
    en: Page down

  commands: |-
    [".select.vertically", { direction: 1, by: "page", shift: "extend" }]

  keys:
    qwerty: |-
      `c-f` (helix: select)

select.pageDown.jump:
  title:
    en: Page down

  commands: |-
    [".select.vertically", { direction: 1, by: "page", shift: "jump" }]

  keys:
    qwerty: |-
      `c-f` (core: move; core: modify)

select.pageUp.extend:
  title:
    en: Page up

  commands: |-
    [".select.vertically", { direction: -1, by: "page", shift: "extend" }]

  keys:
    qwerty: |-
      `c-b` (helix: select)

select.pageUp.jump:
  title:
    en: Page up

  commands: |-
    [".select.vertically", { direction: -1, by: "page", shift: "jump" }]

  keys:
    qwerty: |-
      `c-b` (core: move; core: modify)

select.right.extend:
  title:
    en: Extend right

  commands: |-
    [".select.horizontally", { direction: 1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-l` (kakoune: move)
      `s-right` (kakoune: move)
      `l` (helix: select)
      `right` (helix: select)

select.right.jump:
  title:
    en: Jump right

  commands: |-
    [".select.horizontally", { direction: 1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `l` (core: move)  , `right` (core: move)

select.to:
  title:
    en: Select to

  doc:
    en: |
      Select to.

      If a count is specified, this command will shift to the start of the given
      line. If no count is specified, this command will shift open the `goto` menu.

      #### Variants

      | Title     | Identifier  | Keybinding                                   | Command                                    |
      | --------- | ----------- | -------------------------------------------- | ------------------------------------------ |
      | Go to     | `to.jump`   | `g` (core: move)                           | `[".select.to", { shift: "jump"  , ... }]` |
      | Extend to | `to.extend` | `s-g` (kakoune: move), `g` (helix: select) | `[".select.to", { shift: "extend", ... }]` |

select.to.extend:
  title:
    en: Extend to

  commands: |-
    [".select.to", { shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-g` (kakoune: move)
      `g` (helix: select)

select.to.jump:
  title:
    en: Go to

  commands: |-
    [".select.to", { shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `g` (core: move)

select.up.extend:
  title:
    en: Extend up

  commands: |-
    [".select.vertically", { direction: -1, shift: "extend", $exclude: [] }]

  keys:
    qwerty: |-
      `s-k` (kakoune: move)
      `s-up` (kakoune: move)  , `k` (helix: select)
      `up` (helix: select)

select.up.jump:
  title:
    en: Jump up

  commands: |-
    [".select.vertically", { direction: -1, shift: "jump" , $exclude: [] }]

  keys:
    qwerty: |-
      `k` (core: move)  , `up` (core: move)

select.vertically:
  title:
    en: Select vertically

  doc:
    en: |
      Select vertically.


      #### Variants

      | Title       | Identifier    | Keybinding                                                                                        | Command                                                           |
      | ----------- | ------------- | ------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
      | Jump down   | `down.jump`   | `j` (core: move)  , `down` (core: move)                                                       | `[".select.vertically", { direction:  1, shift: "jump"  , ... }]` |
      | Extend down | `down.extend` | `s-j` (kakoune: move), `s-down` (kakoune: move), `j` (helix: select), `down` (helix: select)  | `[".select.vertically", { direction:  1, shift: "extend", ... }]` |
      | Jump up     | `up.jump`     | `k` (core: move)  , `up` (core: move)                                                         | `[".select.vertically", { direction: -1, shift: "jump"  , ... }]` |
      | Extend up   | `up.extend`   | `s-k` (kakoune: move), `s-up` (kakoune: move)  , `k` (helix: select), `up` (helix: select)    | `[".select.vertically", { direction: -1, shift: "extend", ... }]` |
      | Half page down   | `halfPageDown.jump`   | `c-d` (core: move; core: modify)                                                | `[".select.vertically", { direction:  1, by: "halfPage", shift: "jump" }]`   |
      | Half page down   | `halfPageDown.extend` | `c-d` (helix: select)                                                           | `[".select.vertically", { direction:  1, by: "halfPage", shift: "extend" }]` |
      | Half page up     | `halfPageUp.jump`     | `c-u` (core: move; core: modify)                                                | `[".select.vertically", { direction: -1, by: "halfPage", shift: "jump" }]`   |
      | Half page up     | `halfPageUp.extend`   | `c-u` (helix: select)                                                           | `[".select.vertically", { direction: -1, by: "halfPage", shift: "extend" }]` |
      | Page down        | `pageDown.jump`       | `c-f` (core: move; core: modify)                                                | `[".select.vertically", { direction:  1, by: "page", shift: "jump" }]`      |
      | Page down        | `pageDown.extend`     | `c-f` (helix: select)                                                           | `[".select.vertically", { direction:  1, by: "page", shift: "extend" }]`    |
      | Page up          | `pageUp.jump`         | `c-b` (core: move; core: modify)                                                | `[".select.vertically", { direction: -1, by: "page", shift: "jump" }]`      |
      | Page up          | `pageUp.extend`       | `c-b` (helix: select)                                                           | `[".select.vertically", { direction: -1, by: "page", shift: "extend" }]`    |

selections.changeDirection:
  title:
    en: Change direction of selections

  keys:
    qwerty: |-
      `a-;` (core: move; helix: select)

  doc:
    en: |
      Change direction of selections.



      #### Variants

      | Title               | Identifier     | Keybinding              | Command                                              |
      | ------------------- | -------------- | ----------------------- | ---------------------------------------------------- |
      | Forward selections  | `faceForward`  | `a-:` (kakoune: move) | `[".selections.changeDirection", { direction:  1 }]` |
      | Backward selections | `faceBackward` |                         | `[".selections.changeDirection", { direction: -1 }]` |

selections.changeOrder:
  title:
    en: Reverse selections

  doc:
    en: |
      Reverse selections.


      #### Variants

      | Title                       | Identifier        | Command                                          |
      | --------------------------- | ----------------- | ------------------------------------------------ |
      | Order selections descending | `orderDescending` | `[".selections.changeOrder", { direction:  1 }]` |
      | Order selections ascending  | `orderAscending`  | `[".selections.changeOrder", { direction: -1 }]` |

selections.clear.main:
  title:
    en: Clear main selections

  commands: |-
    [".selections.filter", { expression: "i !== count" , $exclude: [] }]

  keys:
    qwerty: |-
      `a-,` (core: move; helix: select)

selections.clear.secondary:
  title:
    en: Clear secondary selections

  commands: |-
    [".selections.filter", { expression: "i === count" , $exclude: [] }]

  keys:
    qwerty: |-
      `,` (core: move; helix: select)

selections.copy:
  title:
    en: Copy selections below

  keys:
    qwerty: |-
      `s-c` (core: move; helix: select)

  doc:
    en: |
      Copy selections below.


      #### Variant

      | Title                 | Identifier   | Keybinding                            | Command                                   |
      | --------------------- | ------------ | ------------------------------------- | ----------------------------------------- |
      | Copy selections above | `copy.above` | `s-a-c` (core: move; helix: select) | `[".selections.copy", { direction: -1 }]` |

selections.copy.above:
  title:
    en: Copy selections above

  commands: |-
    [".selections.copy", { direction: -1 }]

  keys:
    qwerty: |-
      `s-a-c` (core: move; helix: select)

selections.expandToLines:
  title:
    en: Expand to lines

  keys:
    qwerty: |-
      `x` (kakoune: move)
      `s-x` (helix: move; helix: select)

  doc:
    en: |+
      Expand to lines.

      Expand selections to contain full lines (including end-of-line characters).

selections.faceBackward:
  title:
    en: Backward selections

  commands: |-
    [".selections.changeDirection", { direction: -1 }]

selections.faceForward:
  title:
    en: Forward selections

  commands: |-
    [".selections.changeDirection", { direction: 1 }]

  keys:
    qwerty: |-
      `a-:` (kakoune: move)

selections.filter:
  title:
    en: Filter selections

  keys:
    qwerty: |-
      `$` (core: move; helix: select)

  doc:
    en: |
      Filter selections.

      #### Variants

      | Title                      | Identifier              | Keybinding                            | Commands                                                                 |
      | -------------------------- | ----------------------- | ------------------------------------- | ------------------------------------------------------------------------ |
      | Keep matching selections   | `filter.regexp`         | `a-k` (core: move; helix: select)   | `[".selections.filter", { defaultExpression: "/"               , ... }]` |
      | Clear matching selections  | `filter.regexp.inverse` | `s-a-k` (core: move; helix: select) | `[".selections.filter", { defaultExpression: "/", inverse: true, ... }]` |
      | Clear secondary selections | `clear.secondary`       | `,` (core: move; helix: select)     | `[".selections.filter", { expression: "i === count"            , ... }]` |
      | Clear main selections      | `clear.main`            | `a-,` (core: move; helix: select)   | `[".selections.filter", { expression: "i !== count"            , ... }]` |

selections.filter.regexp:
  title:
    en: Keep matching selections

  commands: |-
    [".selections.filter", { defaultExpression: "/" , $exclude: [] }]

  keys:
    qwerty: |-
      `a-k` (core: move; helix: select)

selections.filter.regexp.inverse:
  title:
    en: Clear matching selections

  keys:
    qwerty: |-
      `s-a-k` (core: move; helix: select)

  commands: |-
    [".selections.filter", { defaultExpression: "/", inverse: true, $exclude: [] }]

selections.hideIndices:
  title:
    en: Hide selection indices

  commands: |-
    [".selections.toggleIndices", { display: false, $exclude: [] }]

selections.merge:
  title:
    en: Merge contiguous selections

  keys:
    qwerty: |-
      `a-_` (kakoune: move)

  doc:
    en: |+
      Merge contiguous selections.

selections.open:
  title:
    en: Open selected file

  doc:
    en: |
      Open selected file.

selections.orderAscending:
  title:
    en: Order selections ascending

  commands: |-
    [".selections.changeOrder", { direction: -1 }]

selections.orderDescending:
  title:
    en: Order selections descending

  commands: |-
    [".selections.changeOrder", { direction: 1 }]

selections.pipe:
  title:
    en: Pipe selections

  keys:
    qwerty: |-
      `a-|` (core: move; helix: select)

  doc:
    en: |
      Pipe selections.

      Run the specified command or code with the contents of each selection, and
      save the result to a register.

      See https://github.com/mawww/kakoune/blob/master/doc/pages/keys.asciidoc#changes-through-external-programs

      #### Additional commands

      | Title               | Identifier     | Keybinding                          | Commands                                                                                                                    |
      | ------------------- | -------------- | ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
      | Pipe and replace    | `pipe.replace` | `|` (core: move; helix: select)   | `[".selections.pipe", { +expression,register }], [".edit.insert", { register: "|",                                  ... }]` |
      | Pipe and append     | `pipe.append`  | `!` (core: move; helix: select)   | `[".selections.pipe", { +expression,register }], [".edit.insert", { register: "|", where: "end"  , shift: "select", ... }]` |
      | Pipe and prepend    | `pipe.prepend` | `a-!` (core: move; helix: select) | `[".selections.pipe", { +expression,register }], [".edit.insert", { register: "|", where: "start", shift: "select", ... }]` |

selections.pipe.append:
  title:
    en: Pipe and append

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "end" , shift: "select", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `!` (core: move; helix: select)

selections.pipe.prepend:
  title:
    en: Pipe and prepend

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "start", shift: "select", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `a-!` (core: move; helix: select)

selections.pipe.replace:
  title:
    en: Pipe and replace

  commands: |-
    [".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", $exclude: ["expression","register"] }]

  keys:
    qwerty: |-
      `|` (core: move; helix: select)

selections.reduce:
  title:
    en: Reduce selections to their cursor

  keys:
    qwerty: |-
      `;` (core: move; helix: select)

  doc:
    en: |
      Reduce selections to their cursor.



      #### Variant

      | Title                           | Identifier     | Keybinding                | Command                                                        |
      | ------------------------------- | -------------- | ------------------------- | -------------------------------------------------------------- |
      | Reduce selections to their ends | `reduce.edges` | `s-a-s` (kakoune: move) | `[".selections.reduce", { where: "both", empty: false, ... }]` |

selections.reduce.edges:
  title:
    en: Reduce selections to their ends

  commands: |-
    [".selections.reduce", { where: "both", empty: false, $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-s` (kakoune: move)

selections.restore:
  title:
    en: Restore selections

  keys:
    qwerty: |-
      `z` (kakoune: move)

  doc:
    en: |+
      Restore selections.

selections.restore.withCurrent:
  title:
    en: Combine register selections with current ones

  keys:
    qwerty: |-
      `a-z` (kakoune: move)

  doc:
    en: |
      Combine register selections with current ones.


      The following keybinding is also available:

      | Keybinding                | Command                                                       |
      | ------------------------- | ------------------------------------------------------------- |
      | `s-a-z` (kakoune: move) | `[".selections.restore.withCurrent", { reverse: true, ... }]` |

      See https://github.com/mawww/kakoune/blob/master/doc/pages/keys.asciidoc#marks

selections.rotate.both:
  title:
    en: Rotate selections clockwise

  keys:
    qwerty: |-
      `a-)` (kakoune: move)

  doc:
    en: |
      Rotate selections clockwise.


      The following keybinding is also available:

      | Title                               | Identifier     | Keybinding              | Command                                          |
      | ----------------------------------- | -------------- | ----------------------- | ------------------------------------------------ |
      | Rotate selections counter-clockwise | `both.reverse` | `a-(` (kakoune: move) | `[".selections.rotate.both", { reverse: true }]` |

selections.rotate.both.reverse:
  title:
    en: Rotate selections counter-clockwise

  commands: |-
    [".selections.rotate.both", { reverse: true }]

  keys:
    qwerty: |-
      `a-(` (kakoune: move)

selections.rotate.contents:
  title:
    en: Rotate selections clockwise (contents only)

  doc:
    en: |
      Rotate selections clockwise (contents only).


      The following command is also available:

      | Title                                               | Identifier         | Keybinding                           | Command                                              |
      | --------------------------------------------------- | ------------------ | ------------------------------------ | ---------------------------------------------------- |
      | Rotate selections counter-clockwise (contents only) | `contents.reverse` | `a-(` (helix: move; helix: select) | `[".selections.rotate.contents", { reverse: true }]` |

  keys:
    qwerty: |-
      `a-)` (helix: move; helix: select)

selections.rotate.contents.reverse:
  title:
    en: Rotate selections counter-clockwise (contents only)

  keys:
    qwerty: |-
      `a-(` (helix: move; helix: select)

  commands: |-
    [".selections.rotate.contents", { reverse: true }]

selections.rotate.selections:
  title:
    en: Rotate selections clockwise (selections only)

  keys:
    qwerty: |-
      `)` (core: move; helix: select)

  doc:
    en: |
      Rotate selections clockwise (selections only).


      The following keybinding is also available:

      | Title                                                 | Identifier           | Keybinding                        | Command                                                |
      | ----------------------------------------------------- | -------------------- | --------------------------------- | ------------------------------------------------------ |
      | Rotate selections counter-clockwise (selections only) | `selections.reverse` | `(` (core: move; helix: select) | `[".selections.rotate.selections", { reverse: true }]` |

selections.rotate.selections.reverse:
  title:
    en: Rotate selections counter-clockwise (selections only)

  commands: |-
    [".selections.rotate.selections", { reverse: true }]

  keys:
    qwerty: |-
      `(` (core: move; helix: select)

selections.save:
  title:
    en: Save selections

  keys:
    qwerty: |-
      `s-z` (kakoune: move)

  doc:
    en: |+
      Save selections.

selections.saveText:
  title:
    en: Copy selections text

  keys:
    qwerty: |-
      `y` (core: move)

  doc:
    en: |
      Copy selections text.

      | Keybindings         | Commands                                          |
      | -----------         | --------                                          |
      | `y` (helix: select) | `[".selections.saveText"], [".modes.set.move"]` |

selections.select:
  title:
    en: Select within selections

  doc:
    en: |
      Select within selections.

      #### Variants

      | Title          | Identifier      | Keybinding                        | Command                                                                                           |
      | -------------- | --------------- | --------------------------------- | ------------------------------------------------------------------------------------------------- |
      | Leap or select | `select.orLeap` | `s` (core: move; helix: select) | `[".ifEmpty", { then: [[".seek.leap", { ... }]], otherwise: [[".selections.select", { ... }]] }]` |

selections.select.orLeap:
  title:
    en: Leap or select

  commands: |-
    [".ifEmpty", { then: [[".seek.leap", { $exclude: [] }]], otherwise: [[".selections.select", { $exclude: [] }]] }]

  keys:
    qwerty: |-
      `s` (core: move; helix: select)

selections.showIndices:
  title:
    en: Show selection indices

  commands: |-
    [".selections.toggleIndices", { display: true , $exclude: [] }]

selections.sort:
  title:
    en: Sort selections

  doc:
    en: |+
      Sort selections.


selections.split:
  title:
    en: Split selections

  keys:
    qwerty: |-
      `s-s` (core: move; helix: select)

  doc:
    en: |+
      Split selections.

selections.splitLines:
  title:
    en: Split selections at line boundaries

  doc:
    en: |
      Split selections at line boundaries.

      #### Variants

      | Title                   | Identifier                   | Keybinding                          | Command                                                                                                              |
      | ----------------------- | ---------------------------- | ----------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
      | Split selections at line boundaries or leap backwards | `splitLines.orLeap.backward` | `a-s` (core: move; helix: select) | `[".ifEmpty", { then: [[".seek.leap", { direction: -1, ... }]], otherwise: [[".selections.splitLines", { ... }]] }]` |

selections.splitLines.orLeap.backward:
  title:
    en: Split selections at line boundaries or leap backwards

  commands: |-
    [".ifEmpty", { then: [[".seek.leap", { direction: -1, $exclude: [] }]], otherwise: [[".selections.splitLines", { $exclude: [] }]] }]

  keys:
    qwerty: |-
      `a-s` (core: move; helix: select)

selections.toggleIndices:
  title:
    en: Toggle selection indices

  keys:
    qwerty: |-
      `enter` (core: move; helix: select)

  doc:
    en: |
      Toggle selection indices.


      #### Variants

      | Title                  | Identifier    | Command                                                  |
      | ---------------------- | ------------- | -------------------------------------------------------- |
      | Show selection indices | `showIndices` | `[".selections.toggleIndices", { display: true , ... }]` |
      | Hide selection indices | `hideIndices` | `[".selections.toggleIndices", { display: false, ... }]` |

selections.trimLines:
  title:
    en: Trim lines

  keys:
    qwerty: |-
      `a-x` (core: move; helix: select)

  doc:
    en: |+
      Trim lines.

      Trim selections to only contain full lines (from start to line break).

selections.trimWhitespace:
  title:
    en: Trim whitespace

  keys:
    qwerty: |-
      `_` (core: move; helix: select)

  doc:
    en: |+
      Trim whitespace.

      Trim whitespace at beginning and end of selections.

selectRegister:
  title:
    en: Select register for next command

  keys:
    qwerty: |-
      `"` (core: move)

  doc:
    en: |+
      Select register for next command.

      When selecting a register, the next key press is used to determine what
      register is selected. If this key is a `space` character, then a new key
      press is awaited again and the returned register will be specific to the
      current document.

updateCount:
  title:
    en: Update Danceflow count

  doc:
    en: |+
      Update Danceflow count.

      Update the current counter used to repeat the next command.

      #### Additional keybindings

      | Title                          | Keybinding                                                                 | Command                              |
      | ------------------------------ | -------------------------------------------------------------------------- | ------------------------------------ |
      | Add the digit 0 to the counter | `0` (core: move; helix: select), `NumPad0` (core: move; helix: select) | `[".updateCount", { addDigits: 0 }]` |
      | Add the digit 1 to the counter | `1` (core: move; helix: select), `NumPad1` (core: move; helix: select) | `[".updateCount", { addDigits: 1 }]` |
      | Add the digit 2 to the counter | `2` (core: move; helix: select), `NumPad2` (core: move; helix: select) | `[".updateCount", { addDigits: 2 }]` |
      | Add the digit 3 to the counter | `3` (core: move; helix: select), `NumPad3` (core: move; helix: select) | `[".updateCount", { addDigits: 3 }]` |
      | Add the digit 4 to the counter | `4` (core: move; helix: select), `NumPad4` (core: move; helix: select) | `[".updateCount", { addDigits: 4 }]` |
      | Add the digit 5 to the counter | `5` (core: move; helix: select), `NumPad5` (core: move; helix: select) | `[".updateCount", { addDigits: 5 }]` |
      | Add the digit 6 to the counter | `6` (core: move; helix: select), `NumPad6` (core: move; helix: select) | `[".updateCount", { addDigits: 6 }]` |
      | Add the digit 7 to the counter | `7` (core: move; helix: select), `NumPad7` (core: move; helix: select) | `[".updateCount", { addDigits: 7 }]` |
      | Add the digit 8 to the counter | `8` (core: move; helix: select), `NumPad8` (core: move; helix: select) | `[".updateCount", { addDigits: 8 }]` |
      | Add the digit 9 to the counter | `9` (core: move; helix: select), `NumPad9` (core: move; helix: select) | `[".updateCount", { addDigits: 9 }]` |

updateRegister:
  title:
    en: Update the contents of a register

  doc:
    en: |+
      Update the contents of a register.

view.line:
  title:
    en: Reveals a position based on the main cursor

  doc:
    en: |
      Reveals a position based on the main cursor.

view.zen:
  title:
    en: Zenmax the editor

  doc:
    en: |
      Zenmax the editor.

anonymous:

  - commands: |-
      [".changeInput", { action: "next" }]

    keys:
      qwerty: |-
        `down` (core: prompt)

  - commands: |-
      [".changeInput", { action: "previous" }]

    keys:
      qwerty: |-
        `up` (core: prompt)

  - commands: |-
      [".edit.case.swap"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` s-` `` (helix: select)

  - commands: |-
      [".edit.case.toLower"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` ` `` (helix: select)

  - commands: |-
      [".edit.case.toUpper"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` a-` `` (helix: select)

  - commands: |-
      [".edit.deindent"], [".modes.set.move"]

    keys:
      qwerty: |-
        `<` (helix: select)

  - commands: |-
      [".edit.delete"], [".modes.set.move"]

    keys:
      qwerty: |-
        `a-d` (helix: select)

  - commands: |-
      [".edit.indent"], [".modes.set.move"]

    keys:
      qwerty: |-
        `>` (helix: select)

  - commands: |-
      [".edit.insert"], [".modes.set.move"]

    keys:
      qwerty: |-
        `s-r` (helix: select)

  - commands: |-
      [".edit.paste.after"], [".modes.set.move"]

    keys:
      qwerty: |-
        `p` (helix: select)

  - commands: |-
      [".edit.paste.before"], [".modes.set.move"]

    keys:
      qwerty: |-
        `s-p` (helix: select)

  - commands: |-
      [".edit.replaceCharacters"], [".modes.set.move"]

    keys:
      qwerty: |-
        `r` (helix: select)

  - commands: |-
      [".edit.yank-delete"], [".modes.set.move"]

    keys:
      qwerty: |-
        `d` (helix: select)

  - title:
      en: Open match menu

    commands: |-
      [".openMenu", { menu: "match" }]

    keys:
      qwerty: |-
        `m` (helix: move)

  - title:
      en: Open match menu with extend

    commands: |-
      [".openMenu", { menu: "match", pass: [{ shift: "extend" }] }]

    keys:
      qwerty: |-
        `m` (helix: select)

  - title:
      en: Show view menu

    commands: |-
      [".openMenu", { menu: "view", $exclude: [] }]

    keys:
      qwerty: |-
        `v` (kakoune: move)
        `z` (helix: move; helix: select)

  - title:
      en: Show view menu (locked)

    commands: |-
      [".openMenu", { menu: "view", locked: true, $exclude: [] }]

    keys:
      qwerty: |-
        `s-v` (kakoune: move)
        `s-z` (helix: move; helix: select)

  - commands: |-
      [".selections.restore.withCurrent", { reverse: true, $exclude: [] }]

    keys:
      qwerty: |-
        `s-a-z` (kakoune: move)

  - commands: |-
      [".selections.saveText"], [".modes.set.move"]

    keys:
      qwerty: |-
        `y` (helix: select)

  - title:
      en: Add the digit 0 to the counter

    commands: |-
      [".updateCount", { addDigits: 0 }]

    keys:
      azerty: |-
        `s-0` (core: move)
        `NumPad0` (core: move)
      qwerty: |-
        `0` (core: move; helix: select)
        `NumPad0` (core: move; helix: select)

  - title:
      en: Add the digit 1 to the counter

    commands: |-
      [".updateCount", { addDigits: 1 }]

    keys:
      azerty: |-
        `s-1` (core: move)
        `NumPad1` (core: move)
      qwerty: |-
        `1` (core: move; helix: select)
        `NumPad1` (core: move; helix: select)

  - title:
      en: Add the digit 2 to the counter

    commands: |-
      [".updateCount", { addDigits: 2 }]

    keys:
      azerty: |-
        `s-2` (core: move)
        `NumPad2` (core: move)
      qwerty: |-
        `2` (core: move; helix: select)
        `NumPad2` (core: move; helix: select)

  - title:
      en: Add the digit 3 to the counter

    commands: |-
      [".updateCount", { addDigits: 3 }]

    keys:
      azerty: |-
        `s-3` (core: move)
        `NumPad3` (core: move)
      qwerty: |-
        `3` (core: move; helix: select)
        `NumPad3` (core: move; helix: select)

  - title:
      en: Add the digit 4 to the counter

    commands: |-
      [".updateCount", { addDigits: 4 }]

    keys:
      azerty: |-
        `s-4` (core: move)
        `NumPad4` (core: move)
      qwerty: |-
        `4` (core: move; helix: select)
        `NumPad4` (core: move; helix: select)

  - title:
      en: Add the digit 5 to the counter

    commands: |-
      [".updateCount", { addDigits: 5 }]

    keys:
      azerty: |-
        `s-5` (core: move)
        `NumPad5` (core: move)
      qwerty: |-
        `5` (core: move; helix: select)
        `NumPad5` (core: move; helix: select)

  - title:
      en: Add the digit 6 to the counter

    commands: |-
      [".updateCount", { addDigits: 6 }]

    keys:
      azerty: |-
        `s-6` (core: move)
        `NumPad6` (core: move)
      qwerty: |-
        `6` (core: move; helix: select)
        `NumPad6` (core: move; helix: select)

  - title:
      en: Add the digit 7 to the counter

    commands: |-
      [".updateCount", { addDigits: 7 }]

    keys:
      azerty: |-
        `s-7` (core: move)
        `NumPad7` (core: move)
      qwerty: |-
        `7` (core: move; helix: select)
        `NumPad7` (core: move; helix: select)

  - title:
      en: Add the digit 8 to the counter

    commands: |-
      [".updateCount", { addDigits: 8 }]

    keys:
      azerty: |-
        `s-8` (core: move)
        `NumPad8` (core: move)
      qwerty: |-
        `8` (core: move; helix: select)
        `NumPad8` (core: move; helix: select)

  - title:
      en: Add the digit 9 to the counter

    commands: |-
      [".updateCount", { addDigits: 9 }]

    keys:
      azerty: |-
        `s-9` (core: move)
        `NumPad9` (core: move)
      qwerty: |-
        `9` (core: move; helix: select)
        `NumPad9` (core: move; helix: select)

  - commands: |-
      ["workbench.action.showCommands", { $exclude: [] }]

    keys:
      qwerty: |-
        `s-;` (core: move)
