cancel:
  title:
    en: Cancel Danceflow operation

  keys:
    qwerty: |-
      `escape` (core: move, !recording, "!markersNavigationVisible")
      `escape` (core: input)

  doc:
    en: |+
      Cancel Danceflow operation.

changeInput:
  title:
    en: Change current input

  doc:
    en: |+
      Change current input.

      When showing some menus, Danceflow can navigate their history:

      | Keybinding            | Command                                    |
      | --------------------- | ------------------------------------------ |
      | `up` (core: prompt)   | `[".changeInput", { action: "previous" }]` |
      | `down` (core: prompt) | `[".changeInput", { action: "next"     }]` |

dev.copyLastErrorMessage:
  title:
    en: Copies the last encountered error message

  doc:
    en: |
      Copies the last encountered error message.

dev.setSelectionBehavior:
  title:
    en: Set the selection behavior of the specified mode

  doc:
    en: |
      Set the selection behavior of the specified mode.

edit.addSpace.after:
  title:
    en: Add a space after each selection

  doc:
    en: |
      Add a space after each selection.

edit.addSpace.before:
  title:
    en: Add a space before each selection

  doc:
    en: |
      Add a space before each selection.

edit.align:
  title:
    en: Align selections

  keys:
    qwerty: |-
      `&` (core: move)

  doc:
    en: |+
      Align selections.

      Align selections, aligning the cursor of each selection by inserting spaces
      before the first character of each selection.

edit.case.swap:
  title:
    en: Swap case

  keys:
    qwerty: |-
      `` a-` `` (kakoune: move)
      `` s-` `` (helix: move)

  doc:
    en: |
      Swap case.

      | Keybindings               | Commands                                     |
      | -----------               | --------                                     |
      | `` s-` `` (helix: select) | `[".edit.case.swap"], [".modes.set.move"]` |

edit.case.toLower:
  title:
    en: Transform to lower case

  keys:
    qwerty: |-
      `` ` `` (core: move)

  doc:
    en: |
      Transform to lower case.

      | Keybindings             | Commands                                        |
      | -----------             | --------                                        |
      | `` ` `` (helix: select) | `[".edit.case.toLower"], [".modes.set.move"]` |

edit.case.toUpper:
  title:
    en: Transform to upper case

  keys:
    qwerty: |-
      `` s-` `` (kakoune: move)
      `` a-` `` (helix: move)

  doc:
    en: |
      Transform to upper case.

      | Keybindings               | Commands                                        |
      | -----------               | --------                                        |
      | `` a-` `` (helix: select) | `[".edit.case.toUpper"], [".modes.set.move"]` |

edit.copyIndentation:
  title:
    en: Copy indentation

  keys:
    qwerty: |-
      `a-&` (kakoune: move)

  doc:
    en: |+
      Copy indentation.

      Copy the indentation of the main selection (or the count one if a count is
      given) to all other ones.

edit.deindent:
  title:
    en: Deindent selected lines

  keys:
    qwerty: |-
      `a-<` (kakoune: move)

  doc:
    en: |+
      Deindent selected lines.

edit.deindent.withIncomplete:
  title:
    en: Deindent selected lines (including incomplete indent)

  keys:
    qwerty: |-
      `<` (core: move)

  doc:
    en: |
      Deindent selected lines (including incomplete indent).

      | Keybindings         | Commands                                    |
      | -----------         | --------                                    |
      | `<` (helix: select) | `[".edit.deindent"], [".modes.set.move"]` |

edit.delete:
  title:
    en: Delete

  commands: |-
    [".edit.insert", { register: "_", $exclude: [] }]

  keys:
    qwerty: |-
      `a-d` (core: move)

edit.delete-modify:
  title:
    en: Delete and switch to Modify

  commands: |-
    [".modes.set", { mode: "modify", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["mode"] }]

  keys:
    qwerty: |-
      `a-c` (kakoune: move)

edit.indent:
  title:
    en: Indent selected lines

  keys:
    qwerty: |-
      `>` (core: move)

  doc:
    en: |
      Indent selected lines.

      | Keybindings         | Commands                                  |
      | -----------         | --------                                  |
      | `>` (helix: select) | `[".edit.indent"], [".modes.set.move"]` |

edit.indent.withEmpty:
  title:
    en: Indent selected lines (including empty lines)

  keys:
    qwerty: |-
      `a->` (kakoune: move)

  doc:
    en: |+
      Indent selected lines (including empty lines).

edit.insert:
  title:
    en: Insert contents of register

  keys:
    qwerty: |-
      `s-a-r` (kakoune: move)
      `s-r` (helix: move)

  doc:
    en: |
      Insert contents of register.

      A `where` argument may be specified to state where the text should be
      inserted relative to each selection. If unspecified, each selection will be
      replaced by the text.

      Specify `"shift": "select"` to select the inserted selection,
      `"shift": "extend"` to extend to the inserted text, and nothing to keep the
      current selections.

      Specify `all` to paste all contents next to each selection.


      #### Additional commands

      | Title                              | Identifier               | Keybinding                                       | Commands                                                                                                                       |
      | ---------------------------------- | ------------------------ | ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ |
      | Pick register and replace          | `selectRegister-insert`  | `c-r` (kakoune: move), `c-r` (kakoune: modify) | `[".selectRegister", { +register }], [".edit.insert", { ... }]`                                                                |
      | Paste before                       | `paste.before`           |                                                  | `[".edit.insert", { handleNewLine: true, where: "start", ... }]`                                                               |
      | Paste after                        | `paste.after`            |                                                  | `[".edit.insert", { handleNewLine: true, where: "end"  , ... }]`                                                               |
      | Paste before and select            | `paste.before.select`    | `s-p` (core: move)                             | `[".edit.insert", { handleNewLine: true, where: "start", shift: "select", ... }]`                                              |
      | Paste after and select             | `paste.after.select`     | `p` (core: move)                               | `[".edit.insert", { handleNewLine: true, where: "end"  , shift: "select", ... }]`                                              |
      | Paste all before                   | `pasteAll.before`        |                                                  | `[".edit.insert", { handleNewLine: true, where: "start", all: true, ... }]`                                                    |
      | Paste all after                    | `pasteAll.after`         |                                                  | `[".edit.insert", { handleNewLine: true, where: "end"  , all: true, ... }]`                                                    |
      | Paste all before and select        | `pasteAll.before.select` | `s-a-p` (kakoune: move)                        | `[".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", ... }]`                                   |
      | Paste all after and select         | `pasteAll.after.select`  | `a-p` (kakoune: move)                          | `[".edit.insert", { handleNewLine: true, where: "end"  , all: true, shift: "select", ... }]`                                   |
      | Delete                             | `delete`                 | `a-d` (core: move)                             | `[".edit.insert", { register: "_", ... }]`                                                                                     |
      | Delete and switch to Modify        | `delete-modify`          | `a-c` (kakoune: move)                          | `[".modes.set", { mode: "modify", +mode }], [".edit.insert", { register: "_", ... }]`                                          |
      | Copy and delete                    | `yank-delete`            | `d` (core: move)                               | `[".selections.saveText", { +register }],                                            [".edit.insert", { register: "_", ... }]` |
      | Copy, delete and switch to Modify  | `yank-delete-modify`     | `c` (core: move; helix: select)                | `[".selections.saveText", { +register }], [".modes.set.modify"], [".edit.insert", { register: "_", ... }]` |
      | Copy and replace                   | `yank-replace`           | `s-r` (kakoune: move)                          | `[".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", ... }]`               |
      |                                    |                          | `s-r` (helix: select)                            | `[".edit.insert"], [".modes.set.move"]`                                                                                        |
      |                                    |                          | `a-d` (helix: select)                            | `[".edit.delete"], [".modes.set.move"]`                                                                                        |
      |                                    |                          | `d` (helix: select)                              | `[".edit.yank-delete"], [".modes.set.move"]`                                                                                  |
      |                                    |                          | `s-p` (helix: select)                            | `[".edit.paste.before"], [".modes.set.move"]`                                                                                 |
      |                                    |                          | `p` (helix: select)                              | `[".edit.paste.after"], [".modes.set.move"]`                                                                                  |
      | Replace                            | `replace`                |                                                  | `[".edit.insert"]`                                                                                                          |

edit.join:
  title:
    en: Join lines

  keys:
    qwerty: |-
      `a-j` (kakoune: move)
      `s-j` (helix: move; helix: select)

  doc:
    en: |+
      Join lines.

edit.join.select:
  title:
    en: Join lines and select inserted separators

  keys:
    qwerty: |-
      `s-a-j` (core: move; helix: select)

  doc:
    en: |+
      Join lines and select inserted separators.

edit.newLine.above:
  title:
    en: Insert new line above each selection

  keys:
    qwerty: |-
      `s-a-o` (kakoune: move)

  doc:
    en: |
      Insert new line above each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.


      #### Additional keybindings

      | Title                                      | Identifier             | Keybinding                          | Commands                                                                          |
      | ------------------------------------------ | ---------------------- | ------------------------------------| --------------------------------------------------------------------------------- |
      | Insert new line above and switch to modify | `newLine.above.modify` | `s-o` (core: move; helix: select) | `[".edit.newLine.above", { shift: "select" }], [".modes.modify.before", { ... }]` |

edit.newLine.above.modify:
  title:
    en: Insert new line above and switch to modify

  commands: |-
    [".edit.newLine.above", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `s-o` (core: move; helix: select)

edit.newLine.below:
  title:
    en: Insert new line below each selection

  keys:
    qwerty: |-
      `a-o` (kakoune: move)

  doc:
    en: |
      Insert new line below each selection.

      Specify `"shift": "select"` to select the inserted selections, and nothing to
      keep the current selections.


      #### Additional keybindings

      | Title                                      | Identifier             | Keybinding                        | Commands                                                                          |
      | ------------------------------------------ | ---------------------- | --------------------------------- | --------------------------------------------------------------------------------- |
      | Insert new line below and switch to modify | `newLine.below.modify` | `o` (core: move; helix: select) | `[".edit.newLine.below", { shift: "select" }], [".modes.modify.before", { ... }]` |

edit.newLine.below.modify:
  title:
    en: Insert new line below and switch to modify

  commands: |-
    [".edit.newLine.below", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]

  keys:
    qwerty: |-
      `o` (core: move; helix: select)

edit.number.decrement:
  title:
    en: Decrement numbers within selections

  doc:
    en: |
      Decrement numbers within selections.

      This function first selects all numbers within the current selections,
      then decrements those numbers by the specified amount.
      If a repetitions count is provided, it will decrement by that amount.

edit.number.increment:
  title:
    en: Increment numbers within selections

  doc:
    en: |
      Increment numbers within selections.

      This function first selects all numbers within the current selections,
      then increments those numbers by the specified amount.
      If a repetitions count is provided, it will increment by that amount.

edit.paste.after:
  title:
    en: Paste after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , $exclude: [] }]

edit.paste.after.select:
  title:
    en: Paste after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `p` (core: move)

edit.paste.before:
  title:
    en: Paste before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", $exclude: [] }]

edit.paste.before.select:
  title:
    en: Paste before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `s-p` (core: move)

edit.pasteAll.after:
  title:
    en: Paste all after

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, $exclude: [] }]

edit.pasteAll.after.select:
  title:
    en: Paste all after and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "end" , all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `a-p` (kakoune: move)

edit.pasteAll.before:
  title:
    en: Paste all before

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, $exclude: [] }]

edit.pasteAll.before.select:
  title:
    en: Paste all before and select

  commands: |-
    [".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", $exclude: [] }]

  keys:
    qwerty: |-
      `s-a-p` (kakoune: move)

edit.removeEmptyLines:
  title:
    en: Remove empty lines from selections

  doc:
    en: |+
      Remove empty lines from selections.

      Removes all empty or whitespace-only lines that are within each selection.

edit.replace:
  title:
    en: Replace

  commands: |-
    [".edit.insert"]

edit.replaceCharacters:
  title:
    en: Replace characters

  keys:
    qwerty: |-
      `r` (core: move)

  doc:
    en: |
      Replace characters.

      | Keybindings         | Commands                                             |
      | -----------         | --------                                             |
      | `r` (helix: select) | `[".edit.replaceCharacters"], [".modes.set.move"]` |

edit.selectNumbers:
  title:
    en: Select all numbers within current selections

  doc:
    en: |
      Select all numbers within current selections.

      This is a helper function that finds whole numbers within each selection
      and creates new selections that focus on just those numbers. It handles
      negative numbers properly and avoids selecting decimal parts of numbers.

edit.selectRegister-insert:
  title:
    en: Pick register and replace

  commands: |-
    [".selectRegister", { $include: ["register"] }], [".edit.insert", { $exclude: ["register"] }]

  keys:
    qwerty: |-
      `c-r` (kakoune: move)
      `c-r` (kakoune: modify)

edit.yank-delete:
  title:
    en: "Copy and delete"

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".edit.insert", { register: "_", $exclude: ["register"] }]

  keys:
    qwerty: |-
      `d` (core: move)

edit.yank-delete-modify:
  title:
    en: Copy, delete and switch to Modify

  commands: |-
    [".selections.saveText", { $include: ["register"] }], [".modes.set.modify"], [".edit.insert", { register: "_", $exclude: ["register"] }]

  keys:
    qwerty: |-
      `c` (core: move; helix: select)

edit.yank-replace:
  title:
    en: Copy and replace

  commands: |-
    [".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", $exclude: [] }]

  keys:
    qwerty: |-
      `s-r` (kakoune: move)

history.recording.play:
  title:
    en: Replay recording

  keys:
    qwerty: |-
      `q` (kakoune: move)

  doc:
    en: |+
      Replay recording.

history.recording.start:
  title:
    en: Start recording

  keys:
    qwerty: |-
      `s-q` (kakoune: move, !recording)

  doc:
    en: |+
      Start recording.

history.recording.stop:
  title:
    en: Stop recording

  keys:
    qwerty: |-
      `escape` (kakoune: move, recording)
      `s-q` (kakoune: move, recording)

  doc:
    en: |+
      Stop recording.

history.redo:
  title:
    en: Redo

  keys:
    qwerty: |-
      `s-u` (core: move; helix: select)

  doc:
    en: |+
      Redo.

history.redo.selections:
  title:
    en: Redo a change of selections

  keys:
    qwerty: |-
      `s-a-u` (kakoune: move)

  doc:
    en: |+
      Redo a change of selections.

history.repeat:
  title:
    en: Repeat last change

  doc:
    en: |
      Repeat last change.


      | Title                        | Identifier         | Keybinding                          | Commands                                                                      |
      | ---------------------------- | ------------------ | ------------------------------------| ----------------------------------------------------------------------------- |
      | Repeat last selection change | `repeat.selection` |                                     | `[".history.repeat", { filter: "danceflow\\.(seek|select|selections)", +count }]` |
      | Repeat last seek             | `repeat.seek`      | `a-.` (core: move; helix: select) | `[".history.repeat", { filter: "danceflow\\.seek", +count }]`                     |

history.repeat.edit:
  title:
    en: Repeat last edit without a command

  keys:
    qwerty: |-
      `.` (core: move)
      `NumPad_Decimal` (core: move)

  doc:
    en: |+
      Repeat last edit without a command.

history.repeat.seek:
  title:
    en: Repeat last seek

  commands: |-
    [".history.repeat", { filter: "danceflow\\.seek", $include: ["count"] }]

  keys:
    qwerty: |-
      `a-.` (core: move; helix: select)

history.repeat.selection:
  title:
    en: Repeat last selection change

  commands: |-
    [".history.repeat", { filter: "danceflow\\.(seek|select|selections)", $include: ["count"] }]

history.undo:
  title:
    en: Undo

  keys:
    qwerty: |-
      `u` (core: move; helix: select)

  doc:
    en: |+
      Undo.

history.undo.selections:
  title:
    en: Undo a change of selections

  keys:
    qwerty: |-
      `a-u` (kakoune: move)

  doc:
    en: |+
      Undo a change of selections.

ifEmpty:
  title:
    en: |-
      Executes one of the specified commands depending on whether the current
      selections are empty

  doc:
    en: |
      Executes one of the specified commands depending on whether the current
      selections are empty.

ignore:
  title:
    en: Ignore key

  doc:
    en: |
      Ignore key.

inspect.renameToClipboard:
  title:
    en: Renames the inspected symbol to the content of the clipboard

  doc:
    en: |
      Renames the inspected symbol to the content of the clipboard.

modes.modify.after:
  title:
    en: Modify after

  keys:
    qwerty: |-
      `a` (core: move; helix: select)

  commands: |-
    [".selections.faceForward" , { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

modes.modify.before:
  title:
    en: Modify before

  keys:
    qwerty: |-
      `i` (core: move; helix: select)

  commands: |-
    [".selections.faceBackward", { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

modes.modify.lineEnd:
  title:
    en: Modify at line end

  keys:
    qwerty: |-
      `s-a` (core: move; helix: select)

  commands: |-
    [".select.lineEnd" , { shift: "jump" }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]

modes.modify.lineStart:
  title:
    en: Modify at line start

  keys:
    qwerty: |-
      `s-i` (core: move; helix: select)

  commands: |-
    [".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]

modes.set:
  title:
    en: Set Danceflow mode

  doc:
    en: |+
      Set Danceflow mode.

      #### Variants

      | Title              | Identifier   | Keybinding                                                  | Command                                                     |
      | ------------------ | ------------ | ----------------------------------------------------------- | ----------------------------------------------------------- |
      | Set mode to Move | `set.move` | `escape` (core: modify; helix: select), `v` (helix: select) | `[".modes.set", { mode: "move" }], ["hideSuggestWidget"]` |
      | Set mode to Modify | `set.modify` |                                                             | `[".modes.set", { mode: "modify" }]`                        |
      | Set mode to Select | `set.select` | `v` (helix: move)                                         | `[".modes.set", { mode: "select" }]`                        |
      | Set mode to Inspect | `set.inspect` |                                                           | `[".modes.set", { mode: "inspect" }]`                        |

      Other variants are provided to switch to modify mode:

      | Title                | Identifier         | Keybinding                          | Commands                                                                                                                                                                            |
      | -------------------- | ------------------ | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
      | Modify before        | `modify.before`    | `i` (core: move; helix: select)   | `[".selections.faceBackward", { record: false }],           [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "start", record: false, empty: true, ... }]` |
      | Modify after         | `modify.after`     | `a` (core: move; helix: select)   | `[".selections.faceForward" , { record: false }],           [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "end"  , record: false, empty: true, ... }]` |
      | Modify at line start | `modify.lineStart` | `s-i` (core: move; helix: select) | `[".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "start", record: false, empty: true, ... }]` |
      | Modify at line end   | `modify.lineEnd`   | `s-a` (core: move; helix: select) | `[".select.lineEnd"  , { shift: "jump"                  }], [".modes.set", { mode: "modify", +mode }], [".selections.reduce", { where: "end"  , record: false, empty: true, ... }]` |

modes.set.inspect:
  title:
    en: Set mode to Inspect

  commands: |-
    [".modes.set", { mode: "inspect" }]

modes.set.modify:
  title:
    en: Set mode to Modify

  commands: |-
    [".modes.set", { mode: "modify" }]

modes.set.move:
  title:
    en: Set mode to Move

  commands: |-
    [".modes.set", { mode: "move" }], ["hideSuggestWidget"]

  keys:
    qwerty: |-
      `escape` (core: modify; helix: select)
      `v` (helix: select)

modes.set.select:
  title:
    en: Set mode to Select

  commands: |-
    [".modes.set", { mode: "select" }]

  keys:
    qwerty: |-
      `v` (helix: move)

modes.set.temporarily:
  title:
    en: Set Danceflow mode temporarily

  doc:
    en: |+
      Set Danceflow mode temporarily.

      #### Variants

      | Title                 | Identifier               | Keybindings             | Commands                                         |
      | --------------------- | ------------------------ | ----------------------- | ------------------------------------------------ |
      | Temporary Move mode | `set.temporarily.move` | `c-v` (kakoune: modify) | `[".modes.set.temporarily", { mode: "move" }]` |
      | Temporary Modify mode | `set.temporarily.modify` | `c-v` (kakoune: move) | `[".modes.set.temporarily", { mode: "modify" }]` |

modes.set.temporarily.modify:
  title:
    en: Temporary Modify mode

  commands: |-
    [".modes.set.temporarily", { mode: "modify" }]

  keys:
    qwerty: |-
      `c-v` (kakoune: move)

modes.set.temporarily.move:
  title:
    en: Temporary Move mode

  commands: |-
    [".modes.set.temporarily", { mode: "move" }]

  keys:
    qwerty: |-
      `c-v` (kakoune: modify)

openMenu:
  title:
    en: Open menu

  doc:
    en: |+
      Open menu.

      If no menu is specified, a prompt will ask for the name of the menu to open.

      Alternatively, a `menu` can be inlined in the arguments.

      Pass a `prefix` argument to insert the prefix string followed by the typed
      key if it does not match any menu entry. This can be used to implement chords
      like `jj`.

run:
  title:
    en: Run code

  doc:
    en: |
      Run code.

      There are two ways to invoke this command. The first one is to provide an
      `code` string argument. This code must be a valid JavaScript string, and will
      be executed with full access to the [Danceflow API](../api/README.md). For
      instance,

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "code": "Selections.set(Selections.filter(text => text.includes('foo')))",
        },
      },
      ```

      If no argument is provided, a prompt will be shown asking for an input.
      Furthermore, an array of strings can be passed to make longer functions
      easier to read:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "code": [
            "for (const selection of Selections.current) {",
            "  console.log(text(selection));",
            "}",
          ],
        },
      },
      ```

      The second way to use this command is with the `commands` argument. This
      argument must be an array of "command-like" values. The simplest
      "command-like" value is a string corresponding to the command itself:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            "danceflow.modes.set.move",
          ],
        },
      },
      ```

      But arguments can also be provided by passing an array:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            ["danceflow.modes.set", { "mode": "move" }],
          ],
        },
      },
      ```

      Or by passing an object, like regular VS Code key bindings:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            {
              "command": "danceflow.modes.set",
              "args": { "mode": "move" },
            },
          ],
        },
      },
      ```

      These values can be mixed:

      ```json
      {
        "command": "danceflow.run",
        "args": {
          "commands": [
            ["danceflow.selections.saveText", { "register": "^" }],
            {
              "command": "danceflow.modes.set",
              "args": { "mode": "move" },
            },
            "hideSuggestWidget",
          ],
        },
      },
      ```

      If both `code` and `commands` are given, Danceflow will use `code` if arbitrary
      code execution is enabled, or `commands` otherwise.

selections.rotate.both:
  title:
    en: Rotate selections clockwise

  keys:
    qwerty: |-
      `a-)` (kakoune: move)

  doc:
    en: |
      Rotate selections clockwise.


      The following keybinding is also available:

      | Title                               | Identifier     | Keybinding              | Command                                          |
      | ----------------------------------- | -------------- | ----------------------- | ------------------------------------------------ |
      | Rotate selections counter-clockwise | `both.reverse` | `a-(` (kakoune: move) | `[".selections.rotate.both", { reverse: true }]` |

selections.rotate.both.reverse:
  title:
    en: Rotate selections counter-clockwise

  commands: |-
    [".selections.rotate.both", { reverse: true }]

  keys:
    qwerty: |-
      `a-(` (kakoune: move)

selections.rotate.contents:
  title:
    en: Rotate selections clockwise (contents only)

  doc:
    en: |
      Rotate selections clockwise (contents only).


      The following command is also available:

      | Title                                               | Identifier         | Keybinding                           | Command                                              |
      | --------------------------------------------------- | ------------------ | ------------------------------------ | ---------------------------------------------------- |
      | Rotate selections counter-clockwise (contents only) | `contents.reverse` | `a-(` (helix: move; helix: select) | `[".selections.rotate.contents", { reverse: true }]` |

  keys:
    qwerty: |-
      `a-)` (helix: move; helix: select)

selections.rotate.contents.reverse:
  title:
    en: Rotate selections counter-clockwise (contents only)

  keys:
    qwerty: |-
      `a-(` (helix: move; helix: select)

  commands: |-
    [".selections.rotate.contents", { reverse: true }]

selections.rotate.selections:
  title:
    en: Rotate selections clockwise (selections only)

  keys:
    qwerty: |-
      `)` (core: move; helix: select)

  doc:
    en: |
      Rotate selections clockwise (selections only).


      The following keybinding is also available:

      | Title                                                 | Identifier           | Keybinding                        | Command                                                |
      | ----------------------------------------------------- | -------------------- | --------------------------------- | ------------------------------------------------------ |
      | Rotate selections counter-clockwise (selections only) | `selections.reverse` | `(` (core: move; helix: select) | `[".selections.rotate.selections", { reverse: true }]` |

selections.rotate.selections.reverse:
  title:
    en: Rotate selections counter-clockwise (selections only)

  commands: |-
    [".selections.rotate.selections", { reverse: true }]

  keys:
    qwerty: |-
      `(` (core: move; helix: select)

selectRegister:
  title:
    en: Select register for next command

  keys:
    qwerty: |-
      `"` (core: move)

  doc:
    en: |+
      Select register for next command.

      When selecting a register, the next key press is used to determine what
      register is selected. If this key is a `space` character, then a new key
      press is awaited again and the returned register will be specific to the
      current document.

updateCount:
  title:
    en: Update Danceflow count

  doc:
    en: |+
      Update Danceflow count.

      Update the current counter used to repeat the next command.

      #### Additional keybindings

      | Title                          | Keybinding                                                                 | Command                              |
      | ------------------------------ | -------------------------------------------------------------------------- | ------------------------------------ |
      | Add the digit 0 to the counter | `0` (core: move; helix: select), `NumPad0` (core: move; helix: select) | `[".updateCount", { addDigits: 0 }]` |
      | Add the digit 1 to the counter | `1` (core: move; helix: select), `NumPad1` (core: move; helix: select) | `[".updateCount", { addDigits: 1 }]` |
      | Add the digit 2 to the counter | `2` (core: move; helix: select), `NumPad2` (core: move; helix: select) | `[".updateCount", { addDigits: 2 }]` |
      | Add the digit 3 to the counter | `3` (core: move; helix: select), `NumPad3` (core: move; helix: select) | `[".updateCount", { addDigits: 3 }]` |
      | Add the digit 4 to the counter | `4` (core: move; helix: select), `NumPad4` (core: move; helix: select) | `[".updateCount", { addDigits: 4 }]` |
      | Add the digit 5 to the counter | `5` (core: move; helix: select), `NumPad5` (core: move; helix: select) | `[".updateCount", { addDigits: 5 }]` |
      | Add the digit 6 to the counter | `6` (core: move; helix: select), `NumPad6` (core: move; helix: select) | `[".updateCount", { addDigits: 6 }]` |
      | Add the digit 7 to the counter | `7` (core: move; helix: select), `NumPad7` (core: move; helix: select) | `[".updateCount", { addDigits: 7 }]` |
      | Add the digit 8 to the counter | `8` (core: move; helix: select), `NumPad8` (core: move; helix: select) | `[".updateCount", { addDigits: 8 }]` |
      | Add the digit 9 to the counter | `9` (core: move; helix: select), `NumPad9` (core: move; helix: select) | `[".updateCount", { addDigits: 9 }]` |

updateRegister:
  title:
    en: Update the contents of a register

  doc:
    en: |+
      Update the contents of a register.

view.line:
  title:
    en: Reveals a position based on the main cursor

  doc:
    en: |
      Reveals a position based on the main cursor.

view.zen:
  title:
    en: Zenmax the editor

  doc:
    en: |
      Zenmax the editor.

withCompleteSelection:
  title:
    en: Execute a command with what is under the cursor selected too

  doc:
    en: |
      Execute a command with what is under the cursor selected too.

withCompleteSelectionSpawning:
  title:
    en: Execute a command with what is under the cursor selected too

  doc:
    en: |
      Execute a command with what is under the cursor selected too.

anonymous:

  - commands: |-
      [".changeInput", { action: "next" }]

    keys:
      qwerty: |-
        `down` (core: prompt)

  - commands: |-
      [".changeInput", { action: "previous" }]

    keys:
      qwerty: |-
        `up` (core: prompt)

  - commands: |-
      [".edit.case.swap"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` s-` `` (helix: select)

  - commands: |-
      [".edit.case.toLower"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` ` `` (helix: select)

  - commands: |-
      [".edit.case.toUpper"], [".modes.set.move"]

    keys:
      qwerty: |-
        `` a-` `` (helix: select)

  - commands: |-
      [".edit.deindent"], [".modes.set.move"]

    keys:
      qwerty: |-
        `<` (helix: select)

  - commands: |-
      [".edit.delete"], [".modes.set.move"]

    keys:
      qwerty: |-
        `a-d` (helix: select)

  - commands: |-
      [".edit.indent"], [".modes.set.move"]

    keys:
      qwerty: |-
        `>` (helix: select)

  - commands: |-
      [".edit.insert"], [".modes.set.move"]

    keys:
      qwerty: |-
        `s-r` (helix: select)

  - commands: |-
      [".edit.paste.after"], [".modes.set.move"]

    keys:
      qwerty: |-
        `p` (helix: select)

  - commands: |-
      [".edit.paste.before"], [".modes.set.move"]

    keys:
      qwerty: |-
        `s-p` (helix: select)

  - commands: |-
      [".edit.replaceCharacters"], [".modes.set.move"]

    keys:
      qwerty: |-
        `r` (helix: select)

  - commands: |-
      [".edit.yank-delete"], [".modes.set.move"]

    keys:
      qwerty: |-
        `d` (helix: select)

  - title:
      en: Show view menu

    commands: |-
      [".openMenu", { menu: "view", $exclude: [] }]

    keys:
      qwerty: |-
        `v` (kakoune: move)
        `z` (helix: move; helix: select)

  - title:
      en: Show view menu (locked)

    commands: |-
      [".openMenu", { menu: "view", locked: true, $exclude: [] }]

    keys:
      qwerty: |-
        `s-v` (kakoune: move)
        `s-z` (helix: move; helix: select)

  - title:
      en: Add the digit 0 to the counter

    commands: |-
      [".updateCount", { addDigits: 0 }]

    keys:
      qwerty: |-
        `0` (core: move; helix: select)
        `NumPad0` (core: move; helix: select)

  - title:
      en: Add the digit 1 to the counter

    commands: |-
      [".updateCount", { addDigits: 1 }]

    keys:
      qwerty: |-
        `1` (core: move; helix: select)
        `NumPad1` (core: move; helix: select)

  - title:
      en: Add the digit 2 to the counter

    commands: |-
      [".updateCount", { addDigits: 2 }]

    keys:
      qwerty: |-
        `2` (core: move; helix: select)
        `NumPad2` (core: move; helix: select)

  - title:
      en: Add the digit 3 to the counter

    commands: |-
      [".updateCount", { addDigits: 3 }]

    keys:
      qwerty: |-
        `3` (core: move; helix: select)
        `NumPad3` (core: move; helix: select)

  - title:
      en: Add the digit 4 to the counter

    commands: |-
      [".updateCount", { addDigits: 4 }]

    keys:
      qwerty: |-
        `4` (core: move; helix: select)
        `NumPad4` (core: move; helix: select)

  - title:
      en: Add the digit 5 to the counter

    commands: |-
      [".updateCount", { addDigits: 5 }]

    keys:
      qwerty: |-
        `5` (core: move; helix: select)
        `NumPad5` (core: move; helix: select)

  - title:
      en: Add the digit 6 to the counter

    commands: |-
      [".updateCount", { addDigits: 6 }]

    keys:
      qwerty: |-
        `6` (core: move; helix: select)
        `NumPad6` (core: move; helix: select)

  - title:
      en: Add the digit 7 to the counter

    commands: |-
      [".updateCount", { addDigits: 7 }]

    keys:
      qwerty: |-
        `7` (core: move; helix: select)
        `NumPad7` (core: move; helix: select)

  - title:
      en: Add the digit 8 to the counter

    commands: |-
      [".updateCount", { addDigits: 8 }]

    keys:
      qwerty: |-
        `8` (core: move; helix: select)
        `NumPad8` (core: move; helix: select)

  - title:
      en: Add the digit 9 to the counter

    commands: |-
      [".updateCount", { addDigits: 9 }]

    keys:
      qwerty: |-
        `9` (core: move; helix: select)
        `NumPad9` (core: move; helix: select)

  - commands: |-
      ["workbench.action.showCommands", { $exclude: [] }]

    keys:
      qwerty: |-
        `s-;` (core: move)
