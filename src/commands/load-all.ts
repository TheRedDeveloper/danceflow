import { CommandDescriptor, Commands } from ".";
import { ArgumentError, buildCommands, Context, Direction, EditorRequiredError, Shift } from "../api";
import { Register } from "../state/registers";

function getRegister<F extends Register.Flags | Register.Flags[]>(
  _: Context.WithoutActiveEditor,
  argument: { register?: string | Register },
  defaultRegisterName: string,
  requiredFlags: F extends readonly (infer Fs)[] ? Fs : F,
): Register.WithFlags<F> {
  let register = argument.register;
  const extension = _.extension;

  if (typeof register === "string") {
    if (register.startsWith(" ")) {
      if (!(_ instanceof Context)) {
        throw new EditorRequiredError();
      }

      register = extension.registers.forDocument(_.document).get(register.slice(1));
    } else {
      register = extension.registers.get(register);
    }
  } else if (!(register instanceof Register)) {
    register = extension.registers.get(defaultRegisterName);
  }

  register.checkFlags(requiredFlags);

  return (argument.register = register as any);
}

function getCount(_: Context.WithoutActiveEditor, argument: { count?: number }) {
  const count = +(argument.count as any);

  if (count >= 0 && Number.isInteger(count)) {
    return count;
  }

  return (argument.count = 0);
}

function getRepetitions(_: Context.WithoutActiveEditor, argument: { count?: number }) {
  const count = getCount(_, argument);

  if (count <= 0) {
    return 1;
  }

  return count;
}

function getDirection(argument: { direction?: number | string }) {
  const direction = argument.direction;

  if (direction === undefined) {
    return undefined;
  }

  if (typeof direction === "number") {
    if (direction === 1 || direction === -1) {
      return direction as Direction;
    }
  } else if (typeof direction === "string") {
    if (direction === "forward") {
      return Direction.Forward;
    }

    if (direction === "backward") {
      return Direction.Backward;
    }
  }

  throw new ArgumentError(
    '"direction" must be "forward", "backward", 1, -1, or undefined',
    "direction",
  );
}

function getShift(argument: { shift?: number | string }) {
  const shift = argument.shift;

  if (shift === undefined) {
    return undefined;
  }

  if (typeof shift === "number") {
    if (shift === 0 || shift === 1 || shift === 2) {
      return shift as Shift;
    }
  } else if (typeof shift === "string") {
    if (shift === "jump") {
      return Shift.Jump;
    }

    if (shift === "select") {
      return Shift.Select;
    }

    if (shift === "extend") {
      return Shift.Extend;
    }
  }

  throw new ArgumentError(
    '"shift" must be "jump", "select", "extend", 0, 1, 2, or undefined',
    "shift",
  );
}

function getInputOr(argumentName: string, argument: Record<string, any>): any {
  // TODO: remove fallback to deprecated "input" name.
  const defaultInput = argument[argumentName] ?? argument["input"];

  if (defaultInput != null) {
    return () => defaultInput;
  }

  return (promptDefaultInput: () => any) => {
    const result = promptDefaultInput();

    if (typeof result.then === "function") {
      return (result as Thenable<any>).then((x) => (argument[argumentName] = x));
    }

    return (argument[argumentName] = result);
  };
}

function describeAdditionalCommand(
  commands: Commands,
  name: string,
  flags: CommandDescriptor.Flags,
  innerCommands: Parameters<typeof buildCommands>[0],
) {
  const runCommand = buildCommands(innerCommands, { commands });

  (commands as Record<string, CommandDescriptor>)[name] = new CommandDescriptor(
    name,
    (_, argument) => _.runAsync((_) => runCommand(argument, _)),
    flags,
  );
}

/* eslint-disable max-len */
/* eslint-disable no-useless-escape */
/* eslint-disable sort-imports */

//
// Content below this line was auto-generated by load-all.build.ts. Do not edit manually.

import {
  copyLastErrorMessage as dev_copyLastErrorMessage,
  setSelectionBehavior as dev_setSelectionBehavior,
} from "./dev";

import {
  addSpace_after as edit_addSpace_after,
  addSpace_before as edit_addSpace_before,
  align as edit_align,
  case_swap as edit_case_swap,
  case_toLower as edit_case_toLower,
  case_toUpper as edit_case_toUpper,
  copyIndentation as edit_copyIndentation,
  deindent as edit_deindent,
  deindent_withIncomplete as edit_deindent_withIncomplete,
  indent as edit_indent,
  indent_withEmpty as edit_indent_withEmpty,
  insert as edit_insert,
  join as edit_join,
  join_select as edit_join_select,
  newLine_above as edit_newLine_above,
  newLine_below as edit_newLine_below,
  replaceCharacters as edit_replaceCharacters,
} from "./edit";

import {
  recording_play as history_recording_play,
  recording_start as history_recording_start,
  recording_stop as history_recording_stop,
  redo as history_redo,
  redo_selections as history_redo_selections,
  repeat as history_repeat,
  repeat_edit as history_repeat_edit,
  undo as history_undo,
  undo_selections as history_undo_selections,
} from "./history";

import {
  renameToClipboard as inspect_renameToClipboard,
} from "./inspect";

import {
  cancel as cancel,
  changeInput as changeInput,
  ifEmpty as ifEmpty,
  ignore as ignore,
  openMenu as openMenu,
  run as run,
  selectRegister as selectRegister,
  updateCount as updateCount,
  updateRegister as updateRegister,
  withCompleteSelection as withCompleteSelection,
  withCompleteSelectionSpawning as withCompleteSelectionSpawning,
} from "./misc";

import {
  set as modes_set,
  set_temporarily as modes_set_temporarily,
} from "./modes";

import {
  next as search_next,
  search as search,
  selection as search_selection,
} from "./search";

import {
  enclosing as seek_enclosing,
  leap as seek_leap,
  object as seek_object,
  seek as seek,
  syntax_experimental as seek_syntax_experimental,
  word as seek_word,
} from "./seek";

import {
  buffer as select_buffer,
  firstVisibleLine as select_firstVisibleLine,
  horizontally as select_horizontally,
  lastLine as select_lastLine,
  lastVisibleLine as select_lastVisibleLine,
  lineEnd as select_lineEnd,
  lineStart as select_lineStart,
  line_above as select_line_above,
  line_above_extend as select_line_above_extend,
  line_below as select_line_below,
  line_below_extend as select_line_below_extend,
  middleVisibleLine as select_middleVisibleLine,
  to as select_to,
  vertically as select_vertically,
} from "./select";

import {
  changeDirection as selections_changeDirection,
  changeOrder as selections_changeOrder,
  copy as selections_copy,
  expandToLines as selections_expandToLines,
  filter as selections_filter,
  merge as selections_merge,
  open as selections_open,
  pipe as selections_pipe,
  reduce as selections_reduce,
  restore as selections_restore,
  restore_withCurrent as selections_restore_withCurrent,
  save as selections_save,
  saveText as selections_saveText,
  select as selections_select,
  sort as selections_sort,
  split as selections_split,
  splitLines as selections_splitLines,
  toggleIndices as selections_toggleIndices,
  trimLines as selections_trimLines,
  trimWhitespace as selections_trimWhitespace,
} from "./selections";

import {
  both as selections_rotate_both,
  contents as selections_rotate_contents,
  selections as selections_rotate_selections,
} from "./selections.rotate";

import {
  line as view_line,
  zen as view_zen,
} from "./view";

/**
 * All defined Danceflow commands.
 */
export const commands: Commands = function () {
  // Move commands.
  const commands = {
    "danceflow.cancel": new CommandDescriptor(
      "danceflow.cancel",
      (_) => _.runAsync(async (_) => await cancel(_.extension)),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.changeInput": new CommandDescriptor(
      "danceflow.changeInput",
      (_, argument) => _.runAsync(async (_) => await changeInput(argument["action"])),
      CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.dev.copyLastErrorMessage": new CommandDescriptor(
      "danceflow.dev.copyLastErrorMessage",
      (_) => _.runAsync(async (_) => await dev_copyLastErrorMessage(_.extension)),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.dev.setSelectionBehavior": new CommandDescriptor(
      "danceflow.dev.setSelectionBehavior",
      (_, argument) => _.runAsync(async (_) => await dev_setSelectionBehavior(_, _.extension, argument["mode"], argument["value"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.addSpace.after": new CommandDescriptor(
      "danceflow.edit.addSpace.after",
      (_, argument) => _.runAsync(async (_) => await edit_addSpace_after(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.addSpace.before": new CommandDescriptor(
      "danceflow.edit.addSpace.before",
      (_, argument) => _.runAsync(async (_) => await edit_addSpace_before(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.align": new CommandDescriptor(
      "danceflow.edit.align",
      (_, argument) => _.runAsync(async (_) => await edit_align(_, argument["fill"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.case.swap": new CommandDescriptor(
      "danceflow.edit.case.swap",
      (_) => _.runAsync(async (_) => await edit_case_swap(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.case.toLower": new CommandDescriptor(
      "danceflow.edit.case.toLower",
      (_) => _.runAsync(async (_) => await edit_case_toLower(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.case.toUpper": new CommandDescriptor(
      "danceflow.edit.case.toUpper",
      (_) => _.runAsync(async (_) => await edit_case_toUpper(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.copyIndentation": new CommandDescriptor(
      "danceflow.edit.copyIndentation",
      (_, argument) => _.runAsync(async (_) => await edit_copyIndentation(_, _.document, _.selections, getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.deindent": new CommandDescriptor(
      "danceflow.edit.deindent",
      (_, argument) => _.runAsync(async (_) => await edit_deindent(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.deindent.withIncomplete": new CommandDescriptor(
      "danceflow.edit.deindent.withIncomplete",
      (_, argument) => _.runAsync(async (_) => await edit_deindent_withIncomplete(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.indent": new CommandDescriptor(
      "danceflow.edit.indent",
      (_, argument) => _.runAsync(async (_) => await edit_indent(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.indent.withEmpty": new CommandDescriptor(
      "danceflow.edit.indent.withEmpty",
      (_, argument) => _.runAsync(async (_) => await edit_indent_withEmpty(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.insert": new CommandDescriptor(
      "danceflow.edit.insert",
      (_, argument) => _.runAsync(async (_) => await edit_insert(_, _.selections, getRegister(_, argument, "dquote", Register.Flags.CanRead), argument["adjust"], argument["all"], argument["handleNewLine"], getRepetitions(_, argument), getShift(argument), argument["text"], argument["where"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.join": new CommandDescriptor(
      "danceflow.edit.join",
      (_, argument) => _.runAsync(async (_) => await edit_join(_, argument["separator"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.join.select": new CommandDescriptor(
      "danceflow.edit.join.select",
      (_, argument) => _.runAsync(async (_) => await edit_join_select(_, argument["separator"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.newLine.above": new CommandDescriptor(
      "danceflow.edit.newLine.above",
      (_, argument) => _.runAsync(async (_) => await edit_newLine_above(_, getRepetitions(_, argument), getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.newLine.below": new CommandDescriptor(
      "danceflow.edit.newLine.below",
      (_, argument) => _.runAsync(async (_) => await edit_newLine_below(_, getRepetitions(_, argument), getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.edit.replaceCharacters": new CommandDescriptor(
      "danceflow.edit.replaceCharacters",
      (_, argument) => _.runAsync(async (_) => await edit_replaceCharacters(_, getRepetitions(_, argument), getInputOr("input", argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.history.recording.play": new CommandDescriptor(
      "danceflow.history.recording.play",
      (_, argument) => _.runAsync(async (_) => await history_recording_play(_, getRepetitions(_, argument), getRegister(_, argument, "arobase", Register.Flags.CanReadWriteMacros))),
      CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.history.recording.start": new CommandDescriptor(
      "danceflow.history.recording.start",
      (_, argument) => _.runAsync(async (_) => await history_recording_start(_, getRegister(_, argument, "arobase", Register.Flags.CanReadWriteMacros))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.history.recording.stop": new CommandDescriptor(
      "danceflow.history.recording.stop",
      (_, argument) => _.runAsync(async (_) => await history_recording_stop(_, getRegister(_, argument, "arobase", Register.Flags.CanReadWriteMacros))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.history.redo": new CommandDescriptor(
      "danceflow.history.redo",
      (_) => _.runAsync(async (_) => await history_redo()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.history.redo.selections": new CommandDescriptor(
      "danceflow.history.redo.selections",
      (_) => _.runAsync(async (_) => await history_redo_selections()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.history.repeat": new CommandDescriptor(
      "danceflow.history.repeat",
      (_, argument) => _.runAsync(async (_) => await history_repeat(_, getRepetitions(_, argument), argument["filter"])),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.history.repeat.edit": new CommandDescriptor(
      "danceflow.history.repeat.edit",
      (_, argument) => _.runAsync(async (_) => await history_repeat_edit(_, getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.history.undo": new CommandDescriptor(
      "danceflow.history.undo",
      (_) => _.runAsync(async (_) => await history_undo()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.history.undo.selections": new CommandDescriptor(
      "danceflow.history.undo.selections",
      (_) => _.runAsync(async (_) => await history_undo_selections()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.ifEmpty": new CommandDescriptor(
      "danceflow.ifEmpty",
      (_, argument) => _.runAsync(async (_) => await ifEmpty(_, argument, _.selections, argument["then"], argument["otherwise"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.ignore": new CommandDescriptor(
      "danceflow.ignore",
      (_) => _.runAsync(async (_) => await ignore()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.inspect.renameToClipboard": new CommandDescriptor(
      "danceflow.inspect.renameToClipboard",
      (_) => _.runAsync(async (_) => await inspect_renameToClipboard(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.modes.set": new CommandDescriptor(
      "danceflow.modes.set",
      (_, argument) => _.runAsync(async (_) => await modes_set(_, getInputOr("mode", argument))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.modes.set.temporarily": new CommandDescriptor(
      "danceflow.modes.set.temporarily",
      (_, argument) => _.runAsync(async (_) => await modes_set_temporarily(_, getInputOr("mode", argument), getRepetitions(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.openMenu": new CommandDescriptor(
      "danceflow.openMenu",
      (_, argument) => _.runAsync(async (_) => await openMenu(_, getInputOr("menu", argument), argument["prefix"], argument["pass"], argument["locked"], argument["delay"], argument["title"])),
      CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.run": new CommandDescriptor(
      "danceflow.run",
      (_, argument) => _.runAsync(async (_) => await run(_, argument, getInputOr("code", argument), getCount(_, argument), getRepetitions(_, argument), getRegister(_, argument, "null", Register.Flags.None), argument["commands"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.search": new CommandDescriptor(
      "danceflow.search",
      (_, argument) => _.runAsync(async (_) => await search(_, getRegister<[Register.Flags.CanRead, Register.Flags.CanWrite]>(_, argument, "slash", Register.Flags.CanRead | Register.Flags.CanWrite), getRepetitions(_, argument), argument["add"], getDirection(argument), argument["interactive"], getShift(argument), argument)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.search.next": new CommandDescriptor(
      "danceflow.search.next",
      (_, argument) => _.runAsync(async (_) => await search_next(_, _.document, getRegister(_, argument, "slash", Register.Flags.CanRead), getRepetitions(_, argument), argument["add"], getDirection(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.search.selection": new CommandDescriptor(
      "danceflow.search.selection",
      (_, argument) => _.runAsync(async (_) => await search_selection(_.document, _.selections, getRegister(_, argument, "slash", Register.Flags.CanWrite), argument["smart"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek": new CommandDescriptor(
      "danceflow.seek",
      (_, argument) => _.runAsync(async (_) => await seek(_, getInputOr("input", argument), getRepetitions(_, argument), getDirection(argument), getShift(argument), argument["include"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek.enclosing": new CommandDescriptor(
      "danceflow.seek.enclosing",
      (_, argument) => _.runAsync(async (_) => await seek_enclosing(_, getDirection(argument), getShift(argument), argument["open"], argument["pairs"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek.leap": new CommandDescriptor(
      "danceflow.seek.leap",
      (_, argument) => _.runAsync(async (_) => await seek_leap(_, getDirection(argument), argument["labels"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek.object": new CommandDescriptor(
      "danceflow.seek.object",
      (_, argument) => _.runAsync(async (_) => await seek_object(_, getInputOr("input", argument), argument["inner"], argument["where"], getShift(argument), _.extension.treeSitter)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek.syntax.experimental": new CommandDescriptor(
      "danceflow.seek.syntax.experimental",
      (_, argument) => _.runAsync(async (_) => await _.extension.treeSitterOrThrow().withDocumentTree(_.document, (documentTree) => seek_syntax_experimental(_, _.extension.treeSitterOrThrow(), documentTree, argument["where"]))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.seek.word": new CommandDescriptor(
      "danceflow.seek.word",
      (_, argument) => _.runAsync(async (_) => await seek_word(_, getRepetitions(_, argument), argument["stopAtEnd"], argument["ws"], getDirection(argument), getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.buffer": new CommandDescriptor(
      "danceflow.select.buffer",
      (_) => _.runAsync(async (_) => await select_buffer(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.firstVisibleLine": new CommandDescriptor(
      "danceflow.select.firstVisibleLine",
      (_, argument) => _.runAsync(async (_) => await select_firstVisibleLine(_, getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.horizontally": new CommandDescriptor(
      "danceflow.select.horizontally",
      (_, argument) => _.runAsync(async (_) => await select_horizontally(_, argument["avoidEol"], getRepetitions(_, argument), getDirection(argument), getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.lastLine": new CommandDescriptor(
      "danceflow.select.lastLine",
      (_, argument) => _.runAsync(async (_) => await select_lastLine(_, _.document, getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.lastVisibleLine": new CommandDescriptor(
      "danceflow.select.lastVisibleLine",
      (_, argument) => _.runAsync(async (_) => await select_lastVisibleLine(_, getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.line.above": new CommandDescriptor(
      "danceflow.select.line.above",
      (_, argument) => _.runAsync(async (_) => await select_line_above(_, getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.line.above.extend": new CommandDescriptor(
      "danceflow.select.line.above.extend",
      (_, argument) => _.runAsync(async (_) => await select_line_above_extend(_, getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.line.below": new CommandDescriptor(
      "danceflow.select.line.below",
      (_, argument) => _.runAsync(async (_) => await select_line_below(_, getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.line.below.extend": new CommandDescriptor(
      "danceflow.select.line.below.extend",
      (_, argument) => _.runAsync(async (_) => await select_line_below_extend(_, getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.lineEnd": new CommandDescriptor(
      "danceflow.select.lineEnd",
      (_, argument) => _.runAsync(async (_) => await select_lineEnd(_, getCount(_, argument), getShift(argument), argument["lineBreak"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.lineStart": new CommandDescriptor(
      "danceflow.select.lineStart",
      (_, argument) => _.runAsync(async (_) => await select_lineStart(_, getCount(_, argument), getShift(argument), argument["skipBlank"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.middleVisibleLine": new CommandDescriptor(
      "danceflow.select.middleVisibleLine",
      (_, argument) => _.runAsync(async (_) => await select_middleVisibleLine(_, getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.to": new CommandDescriptor(
      "danceflow.select.to",
      (_, argument) => _.runAsync(async (_) => await select_to(_, getCount(_, argument), argument, getShift(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.select.vertically": new CommandDescriptor(
      "danceflow.select.vertically",
      (_, argument) => _.runAsync(async (_) => await select_vertically(_, _.selections, argument["avoidEol"], getRepetitions(_, argument), getDirection(argument), getShift(argument), argument["by"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selectRegister": new CommandDescriptor(
      "danceflow.selectRegister",
      (_, argument) => _.runAsync(async (_) => await selectRegister(_, getInputOr("register", argument))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.selections.changeDirection": new CommandDescriptor(
      "danceflow.selections.changeDirection",
      (_, argument) => _.runAsync(async (_) => await selections_changeDirection(_, getDirection(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.changeOrder": new CommandDescriptor(
      "danceflow.selections.changeOrder",
      (_, argument) => _.runAsync(async (_) => await selections_changeOrder(_, _.selections.slice(), getDirection(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.copy": new CommandDescriptor(
      "danceflow.selections.copy",
      (_, argument) => _.runAsync(async (_) => await selections_copy(_, _.document, _.selections, getRepetitions(_, argument), getDirection(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.expandToLines": new CommandDescriptor(
      "danceflow.selections.expandToLines",
      (_) => _.runAsync(async (_) => await selections_expandToLines(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.filter": new CommandDescriptor(
      "danceflow.selections.filter",
      (_, argument) => _.runAsync(async (_) => await selections_filter(_, argument, argument["defaultExpression"], argument["inverse"], argument["interactive"], getCount(_, argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.merge": new CommandDescriptor(
      "danceflow.selections.merge",
      (_) => _.runAsync(async (_) => await selections_merge(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.open": new CommandDescriptor(
      "danceflow.selections.open",
      (_) => _.runAsync(async (_) => await selections_open(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.pipe": new CommandDescriptor(
      "danceflow.selections.pipe",
      (_, argument) => _.runAsync(async (_) => await selections_pipe(_, getRegister(_, argument, "pipe", Register.Flags.CanWrite), getInputOr("expression", argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.reduce": new CommandDescriptor(
      "danceflow.selections.reduce",
      (_, argument) => _.runAsync(async (_) => await selections_reduce(_, argument["where"], argument["empty"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.restore": new CommandDescriptor(
      "danceflow.selections.restore",
      (_, argument) => _.runAsync(async (_) => await selections_restore(_, getRegister(_, argument, "caret", Register.Flags.CanReadSelections))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.restore.withCurrent": new CommandDescriptor(
      "danceflow.selections.restore.withCurrent",
      (_, argument) => _.runAsync(async (_) => await selections_restore_withCurrent(_, _.document, getRegister(_, argument, "caret", Register.Flags.CanReadSelections), argument["reverse"], argument["action"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.rotate.both": new CommandDescriptor(
      "danceflow.selections.rotate.both",
      (_, argument) => _.runAsync(async (_) => await selections_rotate_both(_, getRepetitions(_, argument), argument["reverse"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.rotate.contents": new CommandDescriptor(
      "danceflow.selections.rotate.contents",
      (_, argument) => _.runAsync(async (_) => await selections_rotate_contents(_, getRepetitions(_, argument), argument["reverse"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.rotate.selections": new CommandDescriptor(
      "danceflow.selections.rotate.selections",
      (_, argument) => _.runAsync(async (_) => await selections_rotate_selections(_, getRepetitions(_, argument), argument["reverse"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.save": new CommandDescriptor(
      "danceflow.selections.save",
      (_, argument) => _.runAsync(async (_) => await selections_save(_, _.document, _.selections, getRegister(_, argument, "caret", Register.Flags.CanWriteSelections), argument["style"], argument["until"], argument["untilDelay"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.saveText": new CommandDescriptor(
      "danceflow.selections.saveText",
      (_, argument) => _.runAsync(async (_) => await selections_saveText(_.document, _.selections, getRegister(_, argument, "dquote", Register.Flags.CanWrite))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.select": new CommandDescriptor(
      "danceflow.selections.select",
      (_, argument) => _.runAsync(async (_) => await selections_select(_, argument["interactive"], argument)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.sort": new CommandDescriptor(
      "danceflow.selections.sort",
      (_, argument) => _.runAsync(async (_) => await selections_sort(_, getInputOr("expression", argument), getDirection(argument))),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.split": new CommandDescriptor(
      "danceflow.selections.split",
      (_, argument) => _.runAsync(async (_) => await selections_split(_, argument["excludeEmpty"], argument["interactive"], argument)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.splitLines": new CommandDescriptor(
      "danceflow.selections.splitLines",
      (_, argument) => _.runAsync(async (_) => await selections_splitLines(_, _.document, _.selections, getRepetitions(_, argument), argument["excludeEol"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.toggleIndices": new CommandDescriptor(
      "danceflow.selections.toggleIndices",
      (_, argument) => _.runAsync(async (_) => await selections_toggleIndices(_, argument["display"], argument["until"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.trimLines": new CommandDescriptor(
      "danceflow.selections.trimLines",
      (_) => _.runAsync(async (_) => await selections_trimLines(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.selections.trimWhitespace": new CommandDescriptor(
      "danceflow.selections.trimWhitespace",
      (_) => _.runAsync(async (_) => await selections_trimWhitespace(_)),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.updateCount": new CommandDescriptor(
      "danceflow.updateCount",
      (_, argument) => _.runAsync(async (_) => await updateCount(_, getCount(_, argument), _.extension, getInputOr("count", argument), argument["addDigits"])),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.updateRegister": new CommandDescriptor(
      "danceflow.updateRegister",
      (_, argument) => _.runAsync(async (_) => await updateRegister(_, getRegister(_, argument, "dquote", Register.Flags.CanWrite), argument["copyFrom"], getInputOr("input", argument))),
      CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    ),
    "danceflow.view.line": new CommandDescriptor(
      "danceflow.view.line",
      (_, argument) => _.runAsync(async (_) => await view_line(_, argument["at"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.view.zen": new CommandDescriptor(
      "danceflow.view.zen",
      (_) => _.runAsync(async (_) => await view_zen()),
      CommandDescriptor.Flags.None,
    ),
    "danceflow.withCompleteSelection": new CommandDescriptor(
      "danceflow.withCompleteSelection",
      (_, argument) => _.runAsync(async (_) => await withCompleteSelection(_, argument["command"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
    "danceflow.withCompleteSelectionSpawning": new CommandDescriptor(
      "danceflow.withCompleteSelectionSpawning",
      (_, argument) => _.runAsync(async (_) => await withCompleteSelectionSpawning(_, argument["command"])),
      CommandDescriptor.Flags.RequiresActiveEditor,
    ),
  };

  // Additional commands.
  describeAdditionalCommand(
    commands,
    "danceflow.edit.selectRegister-insert",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selectRegister", { $include: ["register"] }], [".edit.insert", { $exclude: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.paste.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.paste.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.paste.before.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.paste.after.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.pasteAll.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", all: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.pasteAll.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , all: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.pasteAll.before.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "start", all: true, shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.pasteAll.after.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { handleNewLine: true, where: "end" , all: true, shift: "select", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.delete",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert", { register: "_", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.delete-modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "modify", $include: ["mode"] }], [".edit.insert", { register: "_", $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.yank-delete",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { $include: ["register"] }], [".edit.insert", { register: "_", $exclude: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.yank-replace",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { register: "tmp" }], [".edit.insert"], [".updateRegister", { copyFrom: "tmp", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.replace",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.insert"]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.history.repeat.selection",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".history.repeat", { filter: "danceflow\\.(seek|select|selections)", $include: ["count"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.history.repeat.seek",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".history.repeat", { filter: "danceflow\\.seek", $include: ["count"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.move",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "move" }], ["hideSuggestWidget"]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "modify" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.select",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "select" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.inspect",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set", { mode: "inspect" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.modify.lineStart",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "jump", skipBlank: true }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.modify.lineEnd",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd" , { shift: "jump" }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.temporarily.move",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set.temporarily", { mode: "move" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.set.temporarily.modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".modes.set.temporarily", { mode: "modify" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { direction: -1 , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.backward.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.selection.smart",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.selection", { smart: true, $include: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.next.add",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.next", { add: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.previous",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.next", { direction: -1 , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.search.previous.add",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".search.next", { direction: -1, add: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.included",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.included.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.included.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.included.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek", { include: true, shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.enclosing.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.enclosing.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.enclosing.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.enclosing", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.ws",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.ws.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.ws.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.word.ws.extend.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { ws: true, shift: "extend", direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.wordEnd",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.wordEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.wordEnd.ws",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , ws: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.wordEnd.ws.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.word", { stopAtEnd: true , ws: true, shift: "extend" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", title: "Select whole object..." }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.inner",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true }], title: "Select inner object..." }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.start",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "start" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.start.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "start", shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.inner.start",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "start" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.inner.start.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "start", shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.end",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "end" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.end.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ where: "end" , shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.inner.end",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "end" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.askObject.inner.end.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".openMenu", { menu: "object", pass: [{ inner: true, where: "end" , shift: "extend" }] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.syntax.next.experimental",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.syntax.experimental", { where: "next" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.syntax.previous.experimental",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.syntax.experimental", { where: "previous" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.syntax.parent.experimental",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.syntax.experimental", { where: "parent" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.syntax.child.experimental",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.syntax.experimental", { where: "child" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.seek.leap.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".seek.leap", { direction: -1, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.down.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.down.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.up.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.up.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.halfPageDown.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, by: "halfPage", shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.halfPageDown.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, by: "halfPage", shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.halfPageUp.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, by: "halfPage", shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.halfPageUp.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, by: "halfPage", shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.pageDown.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, by: "page", shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.pageDown.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: 1, by: "page", shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.pageUp.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, by: "page", shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.pageUp.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.vertically", { direction: -1, by: "page", shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.right.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: 1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.right.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: 1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.left.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: -1, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.left.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.horizontally", { direction: -1, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.to.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.to", { shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.to.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.to", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lineStart.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lineStart.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lineStart.skipBlank.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { skipBlank: true, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lineStart.skipBlank.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { skipBlank: true, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.firstLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { count: 0, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.firstLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineStart", { count: 0, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lineEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.documentEnd.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { count: 2147483647, shift: "jump" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.documentEnd.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lineEnd", { count: 2147483647, shift: "extend", $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lastLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lastLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.firstVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.firstVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.firstVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.firstVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.middleVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.middleVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.middleVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.middleVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lastVisibleLine.jump",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastVisibleLine", { shift: "jump" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.select.lastVisibleLine.extend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".select.lastVisibleLine", { shift: "extend" }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.pipe.replace",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.pipe.append",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "end" , shift: "select", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.pipe.prepend",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.pipe", { $include: ["expression","register"] }], [".edit.insert", { register: "|", where: "start", shift: "select", $exclude: ["expression","register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.filter.regexp",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { defaultExpression: "/" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.filter.regexp.inverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { defaultExpression: "/", inverse: true, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.clear.secondary",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { expression: "i === count" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.clear.main",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { expression: "i !== count" , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.collapse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.filter", { expression: "i === count" , $exclude: [] }], [".selections.reduce"]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.select.orLeap",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".ifEmpty", { then: [[".seek.leap", { $exclude: [] }]], otherwise: [[".selections.select", { $exclude: [] }]] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.splitLines.orLeap.backward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".ifEmpty", { then: [[".seek.leap", { direction: -1, $exclude: [] }]], otherwise: [[".selections.splitLines", { $exclude: [] }]] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.reduce.edges",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.reduce", { where: "both", empty: false, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.faceForward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeDirection", { direction: 1 }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.faceBackward",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeDirection", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.orderDescending",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeOrder", { direction: 1 }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.orderAscending",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.changeOrder", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.copy.above",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.copy", { direction: -1 }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.showIndices",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.toggleIndices", { display: true , $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.hideIndices",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.toggleIndices", { display: false, $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.rotate.both.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.both", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.rotate.contents.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.contents", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.selections.rotate.selections.reverse",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.rotate.selections", { reverse: true }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.yank-delete-modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.saveText", { $include: ["register"] }], [".modes.set.modify"], [".edit.insert", { register: "_", $exclude: ["register"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.modify.before",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.faceBackward", { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "start", record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.modes.modify.after",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".selections.faceForward" , { record: false }], [".modes.set", { mode: "modify", $include: ["mode"] }], [".selections.reduce", { where: "end" , record: false, empty: true, $exclude: ["mode"] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.newLine.above.modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.newLine.above", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]],
  );
  describeAdditionalCommand(
    commands,
    "danceflow.edit.newLine.below.modify",
    CommandDescriptor.Flags.RequiresActiveEditor | CommandDescriptor.Flags.DoNotReplay,
    [[".edit.newLine.below", { shift: "select" }], [".modes.modify.before", { $exclude: [] }]],
  );

  // Finalize `commands`.
  return Object.freeze(commands);
}();
